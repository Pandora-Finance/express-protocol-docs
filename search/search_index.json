{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#welcome-to-express-protocol","title":"Welcome to Express Protocol!","text":"<p>Express protocol is a decentralized protocol built on top of blockchain layer which aims at bringing/ balancing liquidity in the NFT Marketplaces created using the Protocol's SDK.</p> <p>Our protocol backs developer of all kinds, from standard software developer (web2) to blockchain developers (web3), from solo programmers to a professional scaled team and everything in between.</p>"},{"location":"#get-started","title":"Get Started","text":"<p>To directly walk through the process of installation and initialization of Express Protocol SDK, get started with Installation.</p>"},{"location":"#protocol-overview","title":"Protocol Overview","text":"<p>The Express Protocol encapsulates a combination of Smart Contracts and Libraries, as well as a Software Development Kit, built over them.</p> <p>The Smart Contracts interact directly with the blockchains(multiple supported).</p> <p>Protocol Smart Contracts</p> <p>These smart contracts have functionalities to mint, trade and auction tokens of ERC721 and ERC1155 Standards.</p> <p>The SDK built on top of the Smart Contracts enable clients to use the Protocol's Smart Contracts functionalities without directly interacting with the blockchain and smart contracts.</p> <p>Protocol SDK</p>"},{"location":"ERC404/","title":"ERC404","text":""},{"location":"ERC404/#creating-your-erc404-collection-with-express-protocol","title":"Creating Your ERC404 Collection with Express Protocol","text":""},{"location":"ERC404/#overview","title":"Overview","text":"<p>This guide will take you through the step-by-step process of creating and managing your ERC404-powered NFT collection using the Express Protocol's ERC404 Dapp. Whether you're an artist, collector, or enthusiast, this guide will help you navigate the Dapp without the need for coding, from creation to transfer.</p>"},{"location":"ERC404/#getting-started","title":"Getting Started","text":"<ol> <li>Visit the Express Protocol website and click on the \"Try ERC404\" button. </li> <li>Within the Dapp interface, select \"Connect wallet\" and choose your preferred wallet &amp; blockchain network (e.g., Polygon &amp; Ethereum).  </li> <li>Click on the \"Try it\" button to enter the ERC404 Dapp. </li> </ol> <p>Voila! You\u2019ve successfully entered into the ERC404 Dapp!</p>"},{"location":"ERC404/#creating-your-erc404-collection","title":"Creating Your ERC404 Collection","text":""},{"location":"ERC404/#step-1-create-collection","title":"Step 1: Create Collection","text":"<ul> <li>Enter a name, symbol, and define the total token supply for your collection.</li> <li>Click on \"Create Collection\" to generate your ERC404 collection address. </li> </ul>"},{"location":"ERC404/#step-2-upload-nft-data-and-set-token-uri","title":"Step 2: Upload NFT Data and Set Token URI","text":"<ul> <li>Use the \"attach image\" button to upload your NFT image.</li> <li>JSON files containing the image's metadata will automatically download.</li> <li>Select \"attach folder\" to upload the downloaded JSON metadata file.</li> <li>Click \"confirm\" to finalize the token URI. </li> </ul>"},{"location":"ERC404/#step-3-initiate-whitelisting-process","title":"Step 3: Initiate Whitelisting Process","text":"<ul> <li>Copy your ERC404 Collection Address.</li> <li>Paste it into the input field and click \"Confirm\" to initiate the whitelisting process.  Note: Completing this step is essential for authorizing token transfers.</li> </ul>"},{"location":"ERC404/#step-4-execute-token-transfers-and-view-on-marketplaces","title":"Step 4: Execute Token Transfers and View on Marketplaces","text":"<ul> <li>Disclaimer: When you transfer ERC-20 tokens from an ERC-404 collection, it triggers a corresponding transfer of ERC-721 tokens. This means that the number of ERC-721 tokens equivalent to the transferred ERC-20 tokens will be minted in the recipient's wallet, while an equivalent number will be burned from the sender's wallet. </li> <li>Navigate to the \"Transfer tokens\" section. Here, you\u2019re required to enter - Collection Address, Receiver's Wallet Address, and Token Count. Confirm the transfer by clicking on \"Confirm Transfer.\"</li> <li>Authorize the transaction through your wallet.</li> <li>Upon successful transfer, a confirmation message will be displayed.</li> <li>View the transferred NFTs on OpenSea and Rarible.</li> </ul>"},{"location":"ERC404/#step-5-transfer-your-nft","title":"Step 5: Transfer Your NFT","text":"<ul> <li>Connect with ERC404 Dapp using your crypto wallet.</li> <li>In the \"Transfer NFT\" section, input Collection Address, Receiver's Wallet Address, and \"NFT Token ID.\"</li> <li>Finalize the process by clicking \"Confirm Transfer.\"</li> <li> <p>Confirm the transaction within your wallet. </p> </li> <li> <p>Disclaimer: When someone transfers an ERC-721 token, the same ERC-721 token will be transferred to another person, and an ERC-20 token will be automatically transferred as well. This means that when an ERC-721 token is sent, it triggers a simultaneous transfer of both the ERC-721 token itself and an ERC-20 token to the recipient.</p> </li> </ul>"},{"location":"ERC404/#conclusion","title":"Conclusion","text":"<p>This guide has provided a comprehensive walkthrough to bring your digital collection to life using Express Protocol\u2019s ERC404 Dapp. Explore the Dapp and launch your NFT collections hassle-free!</p>"},{"location":"express/","title":"Why Express?","text":"<p>Through Express Protocol's robust and handy SDK, you can develop from a simple NFT minting dApp to a complex multistandard multichain NFT Marketplace with features like auctioning, creating collections and much more. </p>"},{"location":"express/#challanges-with-developing-nft-dapps","title":"Challanges with developing NFT dApps","text":"<ul> <li> <p>Nativity: Developers need to be native to the web3 tech, have good familiarity with blockchain and must be proficient in writing smart contracts.</p> </li> <li> <p>Ease of Use: Developing dApps involves checking many marks like writing efficient functions, adding modifiers and decorators, controlling access and a hell lot.</p> </li> <li> <p>Time Consumption: Checking above mentioned marks and writing smart contracts from scratch takes a good amount of time.</p> </li> <li> <p>Security: With transfering assets and funds through dApps, there comes many vulnerabilities which can and had caused exploitation of funds and complete failure of application in past.</p> </li> </ul>"},{"location":"express/#how-express-protocol-solves-these-challenge","title":"How Express Protocol Solves these challenge","text":"<ul> <li> <p>Express SDK enables developer to create NFT dApps without gettting intimidated by blockchain and smart contract complexities. SDK takes care of interacting at blockchain level and developer just need to design a frontend, set up a wallet and call SDK function to create a operating NFT dApp.</p> </li> <li> <p>With Express SDK, developers don't have to write smart contracts from scratch for their dApp, so they can put their skills and energy in creating innovative and out of the box applications instead of re-inventing the wheel.</p> </li> <li> <p>Building NFT Marketplaces may take days and weeks but with Express SDK, it is possible to build fully functional multinetwork NFT Marketplace in few hours.</p> </li> <li> <p>Express Protocol codebase is open source and the Protocol's Smart Contracts have gone through multiple phase of auditing and hence it ensures that building dApps with Express SDK, which is built on well tested Smart Contracts, is immune to all the existing threats and vulnerabilities.</p> </li> </ul> <p>These are plenty of challenges Express Protocol is solving, but the centre of attention is yet to come.</p>"},{"location":"express/#liquidating-assets","title":"Liquidating Assets","text":"<p>Currently, the major problem with the NFT Marketplaces is the lack of liquidity or unbalanced liquidity among markets. There are many scenarios where there is a NFT listed on one marketplace but the potential bidders and buyers are unaware about the listing as they might be on any other marketplace and hence the order stays unfilled.</p> <p>Express protocol liquidates assets through the concept of shared order book. Every marketplaces built using Express SDK shares all the listing and placed orders and therefore balancing liquidity among markets. This simply means that a NFT listed on one market place can be filled through all other markets built using our SDK.</p>"},{"location":"guide/","title":"NFT MarketPlace","text":""},{"location":"guide/#create-nft-marketplace-using-pandora-express-sdk","title":"Create NFT Marketplace using Pandora-express SDK","text":""},{"location":"guide/#intro","title":"Intro","text":"<p>In this guide we will make NFT marketplace Dapp using Express Protocol SDK through which anyone can mint, buy and sell tokens.   We will use Pandora Public ERC721 contract for NFT minting and Pandora Market Contract for Buying/Selling NFTs.   You also need to connect a wallet, so make sure you have metamask wallet installed.</p> <p>Alright without further ado, let's create our marketplace!</p>"},{"location":"guide/#prerequisites","title":"Prerequisites","text":""},{"location":"guide/#some-prequisites-required-before-building-the-project","title":"Some Prequisites required before building the project:","text":"<pre><code>NodeJS version &gt; 16.0.0\nNPM version &gt; 6.0.0\nMetamask Browser Extension\nParcel Bundler(For bundling Javascript)\n</code></pre>"},{"location":"guide/#code","title":"Code","text":"<p>1.Creating Project:</p> <p>Create an empty folder in your favourite editor. We will use VScode here.</p> <p>2.SDK installation </p> <p>Run in terminal</p> <p><pre><code>npm init \nnpm i pandora-express \nnpm install -g parcel-bundler\n</code></pre> </p> <p>3.Building the UI</p> <p>Make a index.html file and paste the following code.    Here we will make three input fields, User have to enter the tokenURI in the first field that will create an NFT for that user. Next section will take token's ID that the user have created previously and the base price in which the user want to sell his NFT, this will put the NFT on sale. Followed by the last section in which the the NFT buyer can buy the NFT by providing the Sale ID of the NFT and the amount he want to offer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;SDK&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"createItem\"&gt;\n      &lt;h4&gt;Create Item&lt;/h4&gt;\n      &lt;input\n        type=\"text\"\n        id=\"txtCreateItemURI\"\n        required\n        placeholder=\"Enter TokenURI\"\n      /&gt;\n\n      &lt;button id=\"btnCreateItem\"&gt;Create Item&lt;/button&gt;\n    &lt;/div&gt;\n\n\n    &lt;div id=\"sellItem\"&gt;\n      &lt;h4&gt;Sell Item&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numSellItemTokenId\"\n        placeholder=\"Enter TokenId\"\n        required\n      /&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numSellItemPrice\"\n        placeholder=\"Enter Price\"\n        required\n      /&gt;\n\n      &lt;button id=\"btnSellItem\"&gt;Sell Item&lt;/button&gt;\n    &lt;/div&gt;\n\n\n    &lt;div id=\"buyItem\"&gt;\n      &lt;h4&gt;Buy Item&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numBuyItem\"\n        placeholder=\"Enter SaleId\"\n        required\n      /&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numBuyItemAmmount\"\n        placeholder=\"Enter Ammount\"\n        required\n      /&gt;\n\n      &lt;button id=\"btnBuyItem\"&gt;Buy Item&lt;/button&gt;\n    &lt;/div&gt;\n     &lt;script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now run the app with live server.  As we have pasted the code, now our frontend will look something like this:</p> <p></p> <p>4.Using SDK code with our javascript Logic</p> <p>Make a Javascript file, name it main.js,    Now we have to import SDK function in our Dapp and make connection with blockchain using metamask.   Paste the code below in main.js file.</p> <pre><code>//Import createPandoraExpressSDK from SDK\nconst { createPandoraExpressSDK } = require(\"pandora-express\");\nconst pandoraSDK = createPandoraExpressSDK();\n\n//Connecting with Metamask wallet.\nconst init = async () =&gt; {\n//check if metamask is present\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n    console.log(\"Connected\");\n  } else {\n    alert(\"Metamask not found\");\n  }\n};\n</code></pre> <p>Now, we have to define the Mint function, that will mint NFT using the SDK.</p> <pre><code>const mintNft = async () =&gt; {\n//get current account address\n  const accounts = await web3.eth.getAccounts();\n//Get ChainID of current account\n  const chainId = await web3.eth.net.getId();\n//Mint NFT using SDK erc721 nft mint\n await pandoraSDK.erc721.nft.mint(web3, chainId, accounts[0], itemURI.value, [\n  [accounts[0], 100],\n]);\n};\n</code></pre> <p>We have minted a NFT using the SDK now, we can sell the NFT in the market using Sell function of the SDK.   Define the Sell NFT function as written below.</p> <pre><code>const sellNft = async () =&gt; {\nconst accounts = await web3.eth.getAccounts();\nconst chainId = await web3.eth.net.getId();\nconsole.log(chainId);\nawait pandoraSDK.erc721.order.sellNFT(\n  web3,\n  chainId,\n  sellItemTokenId.value,\n  sellItemPrice.value,\n  accounts[0]\n );\n};\n</code></pre> <p>We have put an NFT on sale, anyone else can buy the NFT by providing Price more than the sellItemPrice.</p> <p>You can also try buying the same NFT using different account in your metamask wallet.   Try pasting the code below for buying NFT.</p> <pre><code>const buyNft = async () =&gt; {\nconst accounts = await web3.eth.getAccounts();\nconst chainId = await web3.eth.net.getId();\nconsole.log(chainId);\nawait pandoraSDK.erc721.order.buyNFT(\n  web3,\n  chainId,\n  buyItemSaleId.value,\n  accounts[0],\n  buyItemAmmount.value\n );\n};\n</code></pre> <p>5.Getting Data from User from Frontend</p> <p>Now as we defined the functions for our NFT marketplace, the last step is to get the function parameters using javascript DOM.</p> <p>Paste the code written below to main.js.</p> <pre><code>const itemURI = document.getElementById(\"txtCreateItemURI\");\n\nconst createItemButton = document.getElementById(\"btnCreateItem\");\ncreateItemButton.onclick = mintNft;\n\nconst sellItemTokenId = document.getElementById(\"numSellItemTokenId\");\nconst sellItemPrice = document.getElementById(\"numSellItemPrice\");\n\nconst sellItemButton = document.getElementById(\"btnSellItem\");\nsellItemButton.onclick = sellNft;\n\nconst buyItemSaleId = document.getElementById(\"numBuyItem\");\nconst buyItemAmmount = document.getElementById(\"numBuyItemAmmount\");\nnumBuyItemAmmount;\n\nconst buyItemButton = document.getElementById(\"btnBuyItem\");\nbuyItemButton.onclick = buyNft;\n\ninit();\n</code></pre> <p>Now run in terminal <pre><code>parcel index.html\n</code></pre></p> <p>That's it!</p> <p>Congratulations! You have created your own marketplace and minted as well as listed your first Token in the Marketplace ! If you want to use this functionality and numerous others like timed auction, creating collection, bidding, etc today in your app, check out the Express SDK section which gives you a plug and play SDK component for front end.</p>"},{"location":"guide1/","title":"NFT Auction Market","text":""},{"location":"guide1/#create-nft-auctions-using-pandora-express-sdk","title":"Create NFT Auctions using Pandora-express SDK","text":""},{"location":"guide1/#intro","title":"Intro","text":"<p>In this guide we will make NFT marketplace Dapp using Express Protocol SDK through which anyone can Mint NFTs, Auction them and buyers can Bid on tokens.   We will use Pandora Public ERC721 contract for NFT minting and Pandora Market Contract for Auctioning/Bidding of NFTs.   You also need to connect a wallet, so make sure you have metamask wallet installed.</p> <p>Alright without further ado, let's create our marketplace!</p>"},{"location":"guide1/#prerequisites","title":"Prerequisites","text":""},{"location":"guide1/#some-prequisites-required-before-building-the-project","title":"Some Prequisites required before building the project:","text":"<pre><code>NodeJS version &gt; 16.0.0\nNPM version &gt; 6.0.0\nMetamask Browser Extension\nParcel Bundler(For bundling Javascript)\n</code></pre>"},{"location":"guide1/#code","title":"Code","text":"<p>1.Creating Project:</p> <p>Create an empty folder in your favourite editor. We will use VScode here.</p> <p>2.SDK installation </p> <p>Run in terminal</p> <p><pre><code>npm init \nnpm i pandora-express \nnpm install -g parcel-bundler\n</code></pre> </p> <p>3.Building the UI</p> <p>Make a index.html file and paste the following code.    Here we have made five sections for the frontend, first one we have the create item section, in which any user can mint NFT. Then we have auction section in which user can put their NFT on auction, it has three fields, one for token ID, one for setting Base price of NFT and next for time span in which the auction will end.        Then we have next section for user who want to Bid on the auctioned NFT, user have to enter the sale ID and the Bid offer he want to make for the NFT. Next we have execute Bid section through which the NFT owner can accept the bid made by the bidders, we have two fields for the Sale ID and Bid ID.    Next their is withdraw bid section, by which bidders can withdraw the bid they have made, bidders have to pass the sale ID and Bid ID in the fields present.    At last their is the cancel sale section, NFT owner can cancel the auction of their NFT. User have to enter only the Sale ID.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;SDK&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"createItem\"&gt;\n      &lt;h4&gt;Create Item&lt;/h4&gt;\n      &lt;input\n        type=\"text\"\n        id=\"txtCreateItemURI\"\n        required\n        placeholder=\"Enter TokenURI\"\n      /&gt;\n\n      &lt;button id=\"btnCreateItem\"&gt;Create Item&lt;/button&gt;\n    &lt;/div&gt;\n\n\n    &lt;div id=\"auctionItem\"&gt;\n      &lt;h4&gt;Auction Item&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numAuctionItemTokenId\"\n        placeholder=\"Enter TokenId\"\n        required\n      /&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numAuctionItemPrice\"\n        placeholder=\"Enter Auction Price\"\n        required\n      /&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numAuctionItemTime\"\n        placeholder=\"Enter Auction Time\"\n        required\n      /&gt;\n\n      &lt;button id=\"btnAuctionItem\"&gt;Auction Item&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"Bid\"&gt;\n      &lt;h4&gt;Bid&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numBidItemSaleId\"\n        required\n        placeholder=\"Enter SaleId\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numBidItemPrice\"\n        required\n        placeholder=\"Enter Bid Price\"\n      /&gt;\n\n      &lt;button id=\"btnBidItem\"&gt;Bid&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"executeBid\"&gt;\n      &lt;h4&gt;Execute Bid&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numExecuteSaleId\"\n        required\n        placeholder=\"Enter SaleId\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numExecuteBidId\"\n        required\n        placeholder=\"Enter BidId\"\n      /&gt;\n\n      &lt;button id=\"btnExecuteBidItem\"&gt;Execute Bid&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"withdrawBid\"&gt;\n      &lt;h4&gt;Withdraw Bid Money&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numWithdrawSaleId\"\n        required\n        placeholder=\"Enter SaleId\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numWithdrawBidId\"\n        required\n        placeholder=\"Enter BidId\"\n      /&gt;\n\n      &lt;button id=\"btnWithdrawBidItem\"&gt;Withdraw Bid&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"withdrawBid\"&gt;\n      &lt;h4&gt;Cancel Item Sale&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numCancelSaleId\"\n        required\n        placeholder=\"Enter SaleId\"\n      /&gt;\n\n      &lt;button id=\"btnCancelItemSale\"&gt;Cancel Sale&lt;/button&gt;\n    &lt;/div&gt;\n     &lt;script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now run the app with live server As we have pasted the code, Now our frontend will look something like this:</p> <p></p> <p>4.Using SDK code with our javascript Logic</p> <p>Make a Javascript file, name it main.js,    Now we have to import SDK function in our Dapp and make connection with blockchain using metamask.   Paste the code below in main.js file.</p> <pre><code>//Import createPandoraExpressSDK from SDK\nconst { createPandoraExpressSDK } = require(\"pandora-express\");\nconst pandoraSDK = createPandoraExpressSDK();\n\n//Connecting with Metamask wallet.\nconst init = async () =&gt; {\n//check if metamask is present\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n    console.log(\"Connected\");\n  } else {\n    alert(\"Metamask not found\");\n  }\n};\n</code></pre> <p>Now, we have to define the Mint function, that will mint NFT using the SDK.</p> <pre><code> const mintNft = async () =&gt; {\n //get current account address\n   const accounts = await web3.eth.getAccounts();\n //Get ChainID of current account\n   const chainId = await web3.eth.net.getId();\n //Mint NFT using SDK erc721 nft mint\n  await pandoraSDK.erc721.nft.mint(web3, chainId, accounts[0], itemURI.value, [\n   [accounts[0], 100],\n ]);\n }\n</code></pre> <p>We have minted a NFT using the SDK now, we can put the NFT in auction using sellNFTByBid function of the SDK.  Define the auction NFT function that will call the PandoraSDK.erc721.order.sellNFTByBid function.</p> <pre><code>const auctionNft = async () =&gt; {\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  await pandoraSDK.erc721.order.sellNFTByBid(\n    web3,\n    chainId,\n    auctionItemTokenId.value,//Token ID\n    auctionItemPrice.value,// Base Price of Token\n    accounts[0],\n    auctionItemTime.value// Time of Auction\n  );\n}\n</code></pre> <p>After putting the item on Auction, anyone can Bid on the Token by providing price more than the base price of the Token or price more than the previous highest Bid. We can implement the Bid function in our App using the PandoraSDK.erc721.order.bid function.</p> <pre><code>const bid = async () =&gt; {\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  await pandoraSDK.erc721.order.bid(\n    web3,\n    chainId,\n    BidItemSaleId.value, //Sale ID of Token\n    accounts[0],\n    BidItemPrice.value // Price offered by the Bidder\n  );\n};\n</code></pre> <p>The owner of the Token can accept the Bid that he likes using the PandoraSDK.erc721.order.acceptBid function. Lets define a function that owner of Token will use to accept the offer.</p> <pre><code>const executeBid = async () =&gt; {\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  await pandoraSDK.erc721.order.acceptBid(\n    web3,\n    chainId,\n    ExecuteSaleId.value, //Sale ID of the token on Auction\n    ExecuteBidId.value, //Bid ID of the Bid offering\n    accounts[0]\n  );\n};\n</code></pre> <p>After Auction is over and if the Bidder's bid is not accepted then they can withdraw their bids. We will use pandoraSDK.erc721.order.withdrawBid() function to implement this.</p> <pre><code>const withdrawBidMoney = async () =&gt; {\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  await pandoraSDK.erc721.order.withdrawBid(\n    web3,\n    chainId,\n    WithdrawSaleId.value,\n    WithdrawBidId.value,\n    accounts[0]\n  );\n}\n</code></pre> <p>The Owner of the token can cancel the auction using the pandoraSDK.erc721.order.cancelSale() function. Lets define the function for our app.</p> <pre><code>const cancelSale = async () =&gt; {\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  await pandoraSDK.erc721.order.cancelSale(\n    web3,\n    chainId,\n    accounts[0],\n    CancelSaleId.value\n  );\n}\n</code></pre> <p>5.Getting Data from User from Frontend</p> <p>Now as we defined the functions for our Dapp, the last step is to get the function parameters using javascript DOM.</p> <p>Paste the code written below to main.js.</p> <pre><code>const itemURI = document.getElementById(\"txtCreateItemURI\");\n\nconst createItemButton = document.getElementById(\"btnCreateItem\");\ncreateItemButton.onclick = mintNft;\n\nconst itemURI1 = document.getElementById(\"txtCreateItemURI1\");\nconst itemURI2 = document.getElementById(\"txtCreateItemURI2\");\n\nconst auctionItemTokenId = document.getElementById(\"numAuctionItemTokenId\");\nconst auctionItemPrice = document.getElementById(\"numAuctionItemPrice\");\nconst auctionItemTime = document.getElementById(\"numAuctionItemTime\");\n\nconst auctionItemButton = document.getElementById(\"btnAuctionItem\");\nauctionItemButton.onclick = auctionNft;\n\nconst BidItemSaleId = document.getElementById(\"numBidItemSaleId\");\nconst BidItemPrice = document.getElementById(\"numBidItemPrice\");\n\nconst BidItemButton = document.getElementById(\"btnBidItem\");\nBidItemButton.onclick = bid;\n\nconst ExecuteSaleId = document.getElementById(\"numExecuteSaleId\");\nconst ExecuteBidId = document.getElementById(\"numExecuteBidId\");\n\nconst ExecuteBidItemButton = document.getElementById(\"btnExecuteBidItem\");\nExecuteBidItemButton.onclick = executeBid;\n\nconst WithdrawSaleId = document.getElementById(\"numWithdrawSaleId\");\nconst WithdrawBidId = document.getElementById(\"numWithdrawBidId\");\n\nconst WithdrawBidItemButton = document.getElementById(\"btnWithdrawBidItem\");\nWithdrawBidItemButton.onclick = withdrawBidMoney;\n\nconst CancelSaleId = document.getElementById(\"numCancelSaleId\");\n\nconst CancelItemSaleButton = document.getElementById(\"btnCancelItemSale\");\nCancelItemSaleButton.onclick = cancelSale;\n\ninit();\n</code></pre> <p>Now run in terminal <pre><code>parcel index.html\n</code></pre></p> <p>All Set!</p> <p>Congratulations! You have created your own NFT trading marketplace and minted as well as listed your first Token in the Marketplace ! If you want to use this functionality and numerous others things like timed auction, creating collection, bidding, etc today in your app, check out the Express SDK section which gives you a plug and play SDK component for front end.</p>"},{"location":"guide2/","title":"NFT-Drop Dapp","text":""},{"location":"guide2/#create-nft-drop-dapp-using-pandora-express-sdk","title":"Create NFT Drop Dapp using Pandora-express SDK","text":""},{"location":"guide2/#intro","title":"Intro","text":"<p>In this guide we will build a Dapp using Express Protocol SDK through which NFT makers/celebs can mint and Transfer their NFT directly on Ethereum.   Basically celebs and NFT creators can mint their own NFTs and can drop NFTs, whenever they want.    These NFT can later be traded using Express SDK.   You need to connect a wallet, so make sure you have metamask wallet installed.</p> <p>Alright without further ado, let's create our Dapp!</p>"},{"location":"guide2/#prerequisites","title":"Prerequisites","text":""},{"location":"guide2/#some-prequisites-required-before-building-the-project","title":"Some Prequisites required before building the project:","text":"<pre><code>NodeJS version &gt; 16.0.0\nNPM version &gt; 6.0.0\nMetamask Browser Extension\nParcel Bundler(For bundling Javascript)\n</code></pre>"},{"location":"guide2/#code","title":"Code","text":"<p>1.Creating Project:</p> <p>Create an empty folder in your favourite editor. We will use VScode here.</p> <p>2.SDK installation </p> <p>Run in terminal</p> <p><pre><code>npm init \nnpm i pandora-express\nnpm install -g parcel \n</code></pre> </p> <p>3.Building the UI</p> <p>Make a index.html file and paste the following code.     We have made two section here, first is for creating NFT in which any user can mint NFT by giving TokenURI as an argument.    Now their is NFT drop/transfer section, the Owner can transfer the NFT in the market, so their is a transfer NFT function which takes TokenID and receiver's address </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;SDK&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;NFT Drop&lt;/h1&gt;\n    &lt;div id=\"createItem\"&gt;\n      &lt;h4&gt;Mint NFT&lt;/h4&gt;\n      &lt;input\n        type=\"text\"\n        id=\"txtCreateItemURI\"\n        required\n        placeholder=\"Enter TokenURI\"\n      /&gt;\n\n      &lt;button id=\"btnCreateItem\"&gt;Mint NFT&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"dropItem\"&gt;\n      &lt;h4&gt;Drop NFT&lt;/h4&gt;\n      &lt;input\n        type=\"number\"\n        min=\"1\"\n        step=\"1\"\n        id=\"numDropItemTokenId\"\n        placeholder=\"Enter TokenId\"\n        required\n      /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"txtDropItemToAddress\"\n        placeholder=\"Enter receiver's address\"\n        required\n      /&gt;\n\n      &lt;button id=\"btnDropItem\"&gt;Drop NFT&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now run the app with live server As we have pasted the code, now our frontend will look something like this:</p> <p></p> <p>4.Using SDK code with our javascript Logic</p> <p>Make a Javascript file, name it main.js,    Now we have to import SDK function in our Dapp and make connection with blockchain using metamask.   Paste the code below in main.js file.</p> <pre><code>//Import createPandoraExpressSDK from SDK\nconst { createPandoraExpressSDK } = require(\"pandora-express\");\nconst pandoraSDK = createPandoraExpressSDK();\n\n//Connecting with Metamask wallet.\nconst init = async () =&gt; {\n  //check if metamask is present\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n    console.log(\"Connected\");\n  } else {\n    alert(\"Metamask not found\");\n  }\n};\n</code></pre> <p>Now, The creators can Mint their NFT using pandoraSDK.erc721.nft.mint() function. Let's define a function for the same.</p> <pre><code>mintNft = async () =&gt; {\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  await pandoraSDK.erc721.nft.mint(web3, chainId, accounts[0], itemURI.value, [\n    [accounts[0], 100],\n  ]);\n};\n</code></pre> <p>After Minting NFTs, Owners/Creators can Drop/Transfer their NFTs using pandoraSDK.erc721.order.transferNFT() function</p> <pre><code>dropNft = async () =&gt; {\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  await pandoraSDK.erc721.order.transferNFT(\n    web3,\n    chainId,\n    accounts[0],\n    dropItemToAddress.value,\n    dropItemTokenId.value\n  );\n};\n</code></pre> <p>5.Getting Data from User from Frontend</p> <p>Now as we defined the functions for our Dapp, the last step is to get the function parameters using javascript DOM.</p> <p>Paste the code written below to main.js.</p> <pre><code>const itemURI = document.getElementById(\"txtCreateItemURI\");\n\nconst createItemButton = document.getElementById(\"btnCreateItem\");\ncreateItemButton.onclick = mintNft;\n\nconst dropItemToAddress = document.getElementById(\"txtDropItemToAddress\");\nconst dropItemTokenId = document.getElementById(\"numDropItemTokenId\");\n\nconst dropItemButton = document.getElementById(\"btnDropItem\");\ndropItemButton.onclick = dropNft;\n\ninit();\n</code></pre> <p>Now run in terminal <pre><code>parcel index.html\n</code></pre></p> <p>That's it!</p> <p>Congratulations! You have created your first NFT Drop and minted as well as transfer your first Token from  our Marketplace ! If you want to use this functionality and numerous others like timed auction, bidding, etc today in your app, check out the Express SDK section which gives you a plug and play SDK component for front end.</p>"},{"location":"guide3/","title":"NFT-Ticket Booking Dapp","text":""},{"location":"guide3/#build-a-nft-ticketing-dapp-using-pandora-express-sdk","title":"Build a NFT-Ticketing Dapp using Pandora-express SDK","text":""},{"location":"guide3/#intro","title":"Intro","text":"<p>In this guide we will build a Dapp using Express Protocol SDK through which Event organizers or Movie makers can mint and sell their NFT Tickets directly on Ethereum .   Tickets are basically a ERC1155 token that the owner want to distribute in the market and owners can also save some tickets for some particular address.   Owners can then Sell these tickets in the market using Pandora Marketplace SDK.</p> <p>Alright without further ado, let's build our Dapp!</p>"},{"location":"guide3/#prerequisites","title":"Prerequisites","text":""},{"location":"guide3/#some-prequisites-required-before-building-the-project","title":"Some Prequisites required before building the project:","text":"<pre><code>NodeJS version &gt; 16.0.0\nNPM version &gt; 6.0.0\nMetamask Browser Extension\nParcel Bundler(For bundling Javascript)\n</code></pre>"},{"location":"guide3/#code","title":"Code","text":"<p>1.Creating Project:</p> <p>Create an empty folder in your favourite editor. We will use VScode here.   We will use Parcel for bundling the javascript code.</p> <p>2.SDK installation </p> <p>Run in terminal</p> <p><pre><code>npm init \nnpm i pandora-express parcel\nnpm install -g parcel-bundler \n</code></pre> </p> <p>3.Building the UI</p> <p>Make a index.html file and paste the following code.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;SDK&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;NFT Ticket Booking&lt;/h1&gt;\n    &lt;div id=\"Collection1155\"&gt;\n      &lt;h4&gt;Create Event(Collection)&lt;/h4&gt;\n      &lt;input\n        type=\"text\"\n        id=\"collection1155Uri\"\n        required\n        placeholder=\"Enter Collection URI\"\n      /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"collection1155Description\"\n        required\n        placeholder=\"Enter collection Description\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"collection1155Royalties\"\n        required\n        placeholder=\"Enter collection Royalties\"\n      /&gt;\n\n      &lt;button id=\"btnCreateCollection1155\"&gt;Create Collection&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"mintInCollection1155\"&gt;\n      &lt;h4&gt;Mint Tickets(Tokens)&lt;/h4&gt;\n      &lt;input\n        type=\"text\"\n        id=\"collection1155Address\"\n        required\n        placeholder=\"Enter collection Address\"\n      /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"token1155Id\"\n        required\n        placeholder=\"Enter TokenId\"\n      /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"token1155URI\"\n        required\n        placeholder=\"Enter TokenURI\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numMintInCol1155Amount\"\n        required\n        placeholder=\"Enter Amount of Tokens\"\n      /&gt;\n\n      &lt;button id=\"btnMintInCollection1155\"&gt;Mint in collection&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"sellInCollection1155\"&gt;\n      &lt;h4&gt;Sell Tickets(Tokens)&lt;/h4&gt;\n      &lt;input\n        type=\"text\"\n        id=\"sellCollection1155Address\"\n        required\n        placeholder=\"Enter collection Address\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"sell1155TokenId\"\n        required\n        placeholder=\"Enter TokenId\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"sell1155Price\"\n        required\n        placeholder=\"Enter Price\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        id=\"numSellInCol1155Amount\"\n        required\n        placeholder=\"Enter Amount of Tokens\"\n      /&gt;\n\n      &lt;button id=\"btnSellInCollection1155\"&gt;Sell in collection&lt;/button&gt;\n    &lt;/div&gt;\n\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now run the app with live server As we have pasted the code, now our frontend will look something like this:</p> <p></p> <p>5.Getting Data from User from Frontend</p> <p>Now as we defined the functions for our Dapp, the last step is to get the function parameters using javascript DOM.</p> <p>Paste the code written below to main.js.</p> <pre><code>const { createPandoraExpressSDK } = require(\"pandora-express\");\n\ninit = async () =&gt; {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n    console.log(\"Connected\");\n  } else {\n    alert(\"Metamask not found\");\n  }\n};\n\ncreateCollection = async () =&gt; {\n  let ExpressSDK = createPandoraExpressSDK();\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n const result = await ExpressSDK.erc1155.collection.createCollection(\n    web3,\n    chainId,\n    accounts[0],\n    collectionURI.value,\n    collectionDescription.value,\n    [[accounts[0], collectionRoyalties.value]]\n  );\n\n  console.log(result);\n};\n\nmintInCollection = async () =&gt; {\n  let ExpressSDK = createPandoraExpressSDK();\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n const result = await ExpressSDK.erc1155.collection.mint(\n    web3,\n    collectionAddress.value,\n    tokenID.value,\n    itemColNumber.value,\n    tokenURI.value,\n    accounts[0]\n  );\n  console.log(result)\n};\n\nsellInCollection = async () =&gt; {\n  let ExpressSDK = createPandoraExpressSDK();\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.net.getId();\n  console.log(chainId);\n  const result = await ExpressSDK.erc1155.collection.sellNFT(\n    web3,\n    chainId,\n    sellCollectionAddress.value,\n    sellTokenId.value,\n    sellPrice.value,\n    accounts[0],\n    itemSellNumber.value\n  );\n  console.log(result)\n};\n\nconst collectionURI = document.getElementById(\"collection1155Uri\");\nconst collectionDescription = document.getElementById(\"collection1155Description\");\nconst collectionRoyalties = document.getElementById(\"collection1155Royalties\");\nconst CollectionButton = document.getElementById(\"btnCreateCollection1155\");\nCollectionButton.onclick = createCollection;\n\nconst collectionAddress = document.getElementById(\"collection1155Address\");\nconst tokenURI = document.getElementById(\"token1155URI\");\nconst tokenID = document.getElementById(\"token1155Id\");\nconst itemColNumber = document.getElementById(\"numMintInCol1155Amount\");\nconst btnMintInCollection = document.getElementById(\"btnMintInCollection1155\");\nbtnMintInCollection.onclick = mintInCollection;\n\nconst sellCollectionAddress = document.getElementById(\"sellCollection1155Address\");\nconst sellTokenId = document.getElementById(\"sell1155TokenId\");\nconst sellPrice = document.getElementById(\"sell1155Price\");\nconst itemSellNumber = document.getElementById(\"numSellInCol1155Amount\");\nconst btnSellInCollection = document.getElementById(\"btnSellInCollection1155\");\nbtnSellInCollection.onclick = sellInCollection;\n\ninit();\n</code></pre> <p>Now run in terminal <pre><code>parcel index.html\n</code></pre></p> <p>That's it!</p> <p>Congratulations! You have created your NFT Ticket Booking Dapp, minted as well as listed your Event Tickets for sale in the Marketplace ! If you want to use this functionality and numerous others like timed auction, bidding, etc today in your app, check out the Express SDK section which gives you a plug and play SDK component for front end.</p>"},{"location":"guide4/","title":"NFT-Lending and Borrowing Dapp","text":""},{"location":"guide4/#create-nft-lending-and-borrowing-using-pandora-express-sdk","title":"Create NFT Lending and Borrowing using Pandora-express SDK","text":""},{"location":"guide4/#intro","title":"Intro","text":"<p>In this guide we will make NFT Lending and Borrowing Dapp using Express Protocol SDK through which anyone can lend or borrow tokens.   We will use Pandora Public ERC721 contract for NFT minting and Pandora Market Contract for Lending through listing the NFT.   You also need to connect a wallet, so make sure you have metamask wallet installed.</p> <p>Alright without further ado, let's create our marketplace!</p>"},{"location":"guide4/#prerequisites","title":"Prerequisites","text":""},{"location":"guide4/#some-prequisites-required-before-building-the-project","title":"Some Prequisites required before building the project:","text":"<pre><code>NodeJS version &gt; 16.0.0\nNPM version &gt; 6.0.0\nMetamask Browser Extension\nParcel Bundler(For bundling Javascript)\n</code></pre>"},{"location":"guide4/#code","title":"Code","text":"<p>1.Creating Project:</p> <p>Create an empty folder in your favourite editor. We will use VScode here.</p> <p>2.SDK installation </p> <p>Run in terminal</p> <pre><code>  npm init \n  npm i pandora-express \n  npm install -g parcel-bundler\n</code></pre> <p></p> <p>3.Building the UI</p> <p>Make a index.html file and paste the following code.    Here we will make seven input fields, User have to enter the URI to mint the NFT, and next fields we need to approve the NFT by taking the aurguments NFT contract address and NFT token ID. On next field we need to add NFT to the listing and enter the aurguments Loan Amount, intrest Amount, Time Period(in days) and Max Time Period(in days). On next field the  lender will accpet the Loan and enters the aurguments NFT loan id, Loan Amount(in wei), intrest Amount(in wei). On nest field if the Borrower wants to end the loan then we will use End Loan to close the Loan. On next field Extend we will need to enter the Loan ID to extend upto the MAX time period entered in Creat function. and next if any of the lender gives you loan you can cancel and creat an other Loan. </p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Test NFT Lending&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n\n\n    &lt;div&gt;\n        &lt;input type=\"text\" id=\"mintNFT\" placeholder=\"Enter URI to mint\"&gt;\n        &lt;button id=\"mintBtn\"&gt;Mint&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;div&gt;\n    &lt;input type=\"text\" id=\"nftContractAddress\" placeholder=\"NFT Contract Address\"&gt;\n    &lt;input type=\"text\" id=\"nftTokenId\" placeholder=\"NFT Token Id\"&gt;\n    &lt;button id=\"approveBtn\"&gt;Approve&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;div&gt;\n    &lt;input type=\"text\" id=\"nftContractAddress1\" placeholder=\"NFT Contract Address\"&gt;\n    &lt;br&gt;\n    &lt;input type=\"text\" id=\"nftTokenId1\" placeholder=\"NFT Token Id\"&gt;\n    &lt;br&gt;\n    &lt;input type=\"number\" id=\"loanAmount\" placeholder=\"Loan Amount(in wei)\"&gt;\n    &lt;br&gt;\n    &lt;input type=\"number\" id=\"interestAmount\" placeholder=\"Interest Amount(in wei)\"&gt;\n    &lt;br&gt;\n    &lt;input type=\"text\" id=\"timePeriod\" placeholder=\"Time Period(in days)\"&gt;\n    &lt;br&gt;\n    &lt;input type=\"text\" id=\"maxTimePeriod\" placeholder=\"Max Time Period(in days)\"&gt;\n    &lt;br&gt;\n    &lt;button id=\"createBtn\"&gt;Create&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;div&gt;\n        &lt;input type=\"number\" id=\"loanId\" placeholder=\"NFT Loan Id\"&gt;\n         &lt;br&gt;\n        &lt;input type=\"number\" id=\"loanAmount1\" placeholder=\"Loan Amount(in wei)\"&gt;\n         &lt;br&gt;\n        &lt;input type=\"number\" id=\"interestAmount1\" placeholder=\"Interest Amount(in wei)\"&gt;\n         &lt;br&gt;\n        &lt;button id=\"acceptBtn\"&gt;Accept&lt;/button&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"number\" id=\"loanId2\" placeholder=\"NFT Loan Id\"&gt;\n         &lt;br&gt;\n        &lt;input type=\"number\" id=\"loanAmount2\" placeholder=\"Loan Amount(in wei)\"&gt;\n         &lt;br&gt;\n        &lt;input type=\"number\" id=\"interestAmount2\" placeholder=\"Interest Amount(in wei)\"&gt;\n         &lt;br&gt;\n        &lt;button id=\"endBtn\"&gt;End Loan&lt;/button&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"number\" id=\"extendLoanId\" placeholder=\"Extend Loan Id\"&gt;\n        &lt;br&gt;\n        &lt;button id=\"extendBtn\"&gt;Extend&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;div&gt;\n        &lt;input type=\"number\" id=\"cancelLoanId\" placeholder=\"Cancel Loan Id\"&gt;\n        &lt;br&gt;\n        &lt;button id=\"cancelBtn\"&gt;Cancel&lt;/button&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Now run the app with live server.  As we have pasted the code, now our frontend will look something like this:</p> <p></p> <p>4.Using SDK code with our javascript Logic</p> <p>Make a Javascript file, name it main.js,    Now we have to import SDK function in our Dapp and add Mint function and make connection with blockchain using metamask.   Paste the code below in main.js file.</p> <pre><code>//Import createPandoraExpressSDK from SDK\n  const { createPandoraExpressSDK } = require(\"pandora-express\");\n  const pandoraSDK = createPandoraExpressSDK();\n\n  mint = async () =&gt;{\n//get current account address\n  const accounts = await web3.eth.getAccounts(); \n//Get ChainID of current account\n  const chainId = await web3.eth.net.getId();\n//Mint NFT using SDK erc721 nft mint\n  console.log(chainId);\n  await pandoraSDK.erc721.nft.mint(web3, chainId, accounts[0], itemURI.value, [\n    [accounts[0], 100],\n  ]);\n}\n</code></pre> <pre><code>const itemURI = document.getElementById(\"mintNFT\");\n\nconst createItemButton = document.getElementById(\"mintBtn\");\ncreateItemButton.onclick = mint;\n\nconst REQUEST_STATUS = [\"Pending\", \"Active\", \"Cancelled\", \"Ended\", \"Defaulted\"];\n\nconst LENDING_CONTRACT_ADDRESS = '0x67490a4814a5C127B0522b40d2DaEdF6104BdeA6';\n//Connecting with Metamask wallet.\nconst init = async () =&gt; {\n//check if metamask is present\n    if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n    console.log(\"Connected\");\n  } else {\n    alert(\"Metamask not found\");\n  }\n  };\n\nconst nftContractAddress = document.getElementById(\"nftContractAddress\");\nconst tokenId = document.getElementById(\"nftTokenId\")\n</code></pre> <p>We have minted a NFT using the SDK now, we can approove the NFT by using approveNFT function of the SDK.   Define the approveNFT function as written below.</p> <pre><code>  approveNFT = async () =&gt; {\n   const web3 = new Web3(window.ethereum);\n   const accounts = await web3.eth.getAccounts();\n   console.log(accounts[0]);\n\n   const instance = new web3.eth.Contract(tokenABI,nftContractAddress.value,\n    {from: accounts[0]});\n\n    await instance.methods.approve(LENDING_CONTRACT_ADDRESS, \n      tokenId.value\n      )\n      .send({\n      from: accounts[0],\n      })\n      .once(\"receipt\", (receipt) =&gt; {\n        console.log(receipt);\n      })\n      .catch((err) =&gt; {\n        console.log(err);\n      });\n};\n</code></pre> <p>We have approved the NFT!!, now that NFT contract address has been approved now it can have access to Lending and Borrowing.</p> <p>now you can creat a loan by createLoan function that will creat a loan on the NFT contract address.   Try pasting the code below for Creating a Loan.</p> <pre><code>createLoan = async () =&gt; {\n  const web3 = new Web3(window.ethereum);\n  const accounts = await web3.eth.getAccounts();\n  const instance = new web3.eth.Contract(contractABI, LENDING_CONTRACT_ADDRESS, {from: accounts[0]});\n\n  await instance.methods.createLoan(nftAddress.value,\n    nftId.value,\n    loanAmount.value.toString(),\n    interestAmount.value.toString(),\n    totalTimePeriod.value * 86400,\n    maxTimePeriod.value\n  ).send({\n        from: accounts[0],\n      })\n      .once(\"receipt\", (receipt) =&gt; {\n        console.log(receipt);\n      })\n      .catch((err) =&gt; {\n        console.log(err);\n      });\n};\n</code></pre> <p>Now we have created a loan which takes NFT Contract address, NFT Token id, Loan Amount(in wei), Intrest Amount(in wei), Time Period(in days), Max time period(in days).</p> <p>For Lender to accept the Loan we need to use acceptLoan function. Try pasting the code below for accepting the Loan.</p> <pre><code>acceptLoan = async () =&gt;{\n  const web3 = new Web3(window.ethereum);\n  const accounts = await web3.eth.getAccounts();\n\n  const instance = new web3.eth.Contract(contractABI, LENDING_CONTRACT_ADDRESS, \n  {from: accounts[0]});\n  const sum = ethLoanAmount.value.toString();\n\n  await instance.methods.acceptLoan(loanID.value).send({\n        value: sum,\n        from: accounts[0],\n      })\n      .once(\"receipt\", (receipt) =&gt; {\n        console.log(receipt);\n      })\n      .catch((err) =&gt; {\n        console.log(err);\n      });\n}\n</code></pre> <p>Now if borrower wants to end the loan before the period he can use endLoan function. we need to add endLoan function to our main.ja file. Try pasting the code below to end the Loan.</p> <pre><code>endLoan = async () =&gt; {\n  const web3 = new Web3(window.ethereum);\n  const accounts = await web3.eth.getAccounts();\n  const instance = new web3.eth.Contract(contractABI, LENDING_CONTRACT_ADDRESS, {from: accounts[0]});\n  const sum = ethLoanAmount1.value*1 + ethInterestAmount1.value*1;\n  console.log(sum);\n  await instance.methods.endLoan(loanID1.value).send({\n    value: sum.toString(),\n    from: accounts[0],\n  })\n  .once(\"receipt\", (receipt) =&gt; {\n    console.log(receipt);\n  })\n  .catch((err) =&gt; {\n    console.log(err);\n  });\n\n}\n</code></pre> <p>Now when we creat a lone we need to enter \"MAX Time Period(in days)\" this are the days that can be extended after the dead-line to use this functionality we have extendLoan function. Try pasting the code below to extend the Loan. </p> <pre><code>extendLoan = async () =&gt; {\n  const web3 = new Web3(window.ethereum);\n  const accounts = await web3.eth.getAccounts();\n  const instance = new web3.eth.Contract(contractABI, LENDING_CONTRACT_ADDRESS, {from: accounts[0]});\n\n  await instance.methods.extendLoan(extendLoanId.value).send({\n    from: accounts[0],\n  })\n  .once(\"receipt\", (receipt) =&gt; {\n    console.log(receipt);\n  })\n  .catch((err) =&gt; {\n    console.log(err);\n  });\n}\n</code></pre> <p>Now if a borrower wants to cancel a listing he can use cancelLoan function. Try pasting the code below to cancel the Loan.</p> <pre><code>cancelLoan = async () =&gt; {\n  const web3 = new Web3(window.ethereum);\n  const accounts = await web3.eth.getAccounts();\n  const instance = new web3.eth.Contract(contractABI, LENDING_CONTRACT_ADDRESS, {from: accounts[0]});\n  await instance.methods.cancelLoan(cancelLoanId.value).send({\n    from: accounts[0],\n  })\n  .once(\"receipt\", (receipt) =&gt; {\n    console.log(receipt);\n  })\n  .catch((err) =&gt; {\n    console.log(err);\n  });\n}\n</code></pre> <p>5.Getting Data from User from Frontend</p> <p>Now as we defined the functions for our NFT Lending and Borrowing, the last step is to get the function parameters using javascript DOM.</p> <p>Paste the code written below to main.js.</p> <pre><code>const approves = document.getElementById(\"approveBtn\");\napproves.onclick = approveNFT;\n\nconst nftAddress = document.getElementById(\"nftContractAddress1\");\nconst nftId = document.getElementById(\"nftTokenId1\");\nconst loanAmount = document.getElementById(\"loanAmount\");\nconst interestAmount = document.getElementById(\"interestAmount\");\nconst totalTimePeriod = document.getElementById(\"timePeriod\");\nconst maxTimePeriod = document.getElementById(\"maxTimePeriod\");\n\nconst create = document.getElementById(\"createBtn\");\ncreate.onclick = createLoan;\n\nconst loanID = document.getElementById(\"loanId\");\nconst ethLoanAmount = document.getElementById(\"loanAmount1\");\nconst ethInterestAmount = document.getElementById(\"interestAmount1\");\n\nconst accept = document.getElementById(\"acceptBtn\");\naccept.onclick = acceptLoan;\n\nconst extendLoanId = document.getElementById(\"extendLoanId\");\n\nconst extend = document.getElementById(\"extendBtn\")\nextend.onclick = extendLoan;\n\nconst cancelLoanId = document.getElementById(\"cancelLoanId\");\n\nconst cancel = document.getElementById(\"cancelBtn\")\ncancel.onclick = cancelLoan;\n\nconst loanID1 = document.getElementById(\"loanId2\");\nconst ethLoanAmount1 = document.getElementById(\"loanAmount2\");\nconst ethInterestAmount1 = document.getElementById(\"interestAmount2\");\n\nconst end = document.getElementById(\"endBtn\")\nend.onclick = endLoan;\n\ninit();\n</code></pre> <p>Now run in terminal</p> <pre><code>parcel index.html\n</code></pre> <p>That's it!</p> <p>Congratulations! You have created your own NFT Lending and Borrowing Dapp If you want to use this functionality and numerous others like timed auction, creating collection, bidding, etc today in your app, check out the  section which gives you a plug and play SDK component for front end.</p>"},{"location":"sdk/gettingStarted/","title":"Getting Started","text":""},{"location":"sdk/gettingStarted/#installation","title":"Installation","text":"<p>SDK is written in Javascript. To use SDK, install it through npm</p> <p><code>npm install pandora-express</code></p> <p>After installation, SDK can be initialized </p> <p>In the main.js file, Paste the following code, this will initialize PandoraExpressSDK <pre><code>import { createPandoraExpressSDK } from \"pandora-express\";\nconst ExpressSDK = createPandoraExpressSDK();\n</code></pre></p> <p>For further usage of SDK with frontend, you can refer to SDK-Usecases section</p>"},{"location":"sdk/gettingStarted/#usage","title":"Usage","text":"<p>With Express Protocol SDK, one can:</p> <ul> <li>Mint ERC721/ERC1155 Token</li> <li>Sell/Buy Tokens</li> <li>Put Tokens on Auction</li> <li>Create/accept bids for auction</li> <li>Deploy personal ERC721/ERC1155 contract(Collection)</li> <li>Mint, trade, and auction tokens inside Collection</li> </ul>"},{"location":"sdk/overview/","title":"Overview","text":"<p>Express Protocol SDK enables any Web2 developer to create out of the box applications around NFTs and NFTMarketplace without getting into the nitty-gritty of Blockchain and Smart Contracts.</p> <p>Currently, The SDK operates on these networks:</p> <ul> <li>Rinkeby Testnet (network id - 4)</li> <li>Ropsten Testnet (network id - 3)</li> <li>BSC Testnet (network id - 97)</li> <li>BSC Mainnet (network id - 56)</li> <li>Polygon-Mumbai Testnet (network id - 80001)</li> <li>Polygon-Mumbai Mainnet (network id - 137)</li> </ul> <p>With Express Protocol SDK, any user can deploy ERC721 and ERC1155 contracts and mint, trade and auction NFTs without diving deep into the smart contract source code.</p> <p>All the ERC721 SDK functions can be quickly looked at here.</p>"},{"location":"sdk/SDKFunctions/erc1155/","title":"ERC1155","text":"<p>Following are the SDK functions for ERC1155 standard:</p> <ul> <li>ExpressSDK.erc1155.nft.mint()</li> <li>ExpressSDK.erc1155.nft.burn()</li> <li>ExpressSDK.erc1155.order.sellNFT()</li> <li>ExpressSDK.erc1155.order.sellNFTbyBid()</li> <li>ExpressSDK.erc1155.order.cancelSale()</li> <li>ExpressSDK.erc1155.order.buyNFT()</li> <li>ExpressSDK.erc1155.order.bid()</li> <li>ExpressSDK.erc1155.order.acceptBid()</li> <li>ExpressSDK.erc1155.order.withdrawBid()</li> <li>ExpressSDK.erc1155.collection.createCollection()</li> <li>ExpressSDK.erc1155.collection.mint()</li> <li>ExpressSDK.erc1155.collection.burn()</li> <li>ExpressSDK.erc1155.collection.sellNFT()</li> <li>ExpressSDK.erc1155.collection.sellNFTbyBid()</li> <li>ExpressSDK.erc1155.collection.cancelSale()</li> <li>ExpressSDK.erc1155.collection.buyNFT()</li> <li>ExpressSDK.erc1155.collection.bid()</li> <li>ExpressSDK.erc1155.collection.acceptBid()</li> <li>ExpressSDK.erc1155.collection.withdrawBid()</li> </ul>"},{"location":"sdk/SDKFunctions/erc721/","title":"ERC721","text":"<p>Following are the SDK functions for ERC721 standard:</p> <ul> <li>ExpressSDK.erc721.nft.mint()</li> <li>ExpressSDK.erc721.nft.batchMint()</li> <li>ExpressSDK.erc721.nft.burn()</li> <li>ExpressSDK.erc721.order.sellNFT()</li> <li>ExpressSDK.erc721.order.sellNFTbyBid()</li> <li>ExpressSDK.erc721.order.cancelSale()</li> <li>ExpressSDK.erc721.order.buyNFT()</li> <li>ExpressSDK.erc721.order.bid()</li> <li>ExpressSDK.erc721.order.acceptBid()</li> <li>ExpressSDK.erc721.order.withdrawBid()</li> <li>ExpressSDK.erc721.nft.fetchTokenURI()</li> <li>ExpressSDK.erc721.collection.createCollection()</li> <li>ExpressSDK.erc721.collection.mint()</li> <li>ExpressSDK.erc721.collection.batchMint()</li> <li>ExpressSDK.erc721.collection.burn()</li> <li>ExpressSDK.erc721.collection.sellNFT()</li> <li>ExpressSDK.erc721.collection.sellNFTbyBid()</li> <li>ExpressSDK.erc721.collection.cancelSale()</li> <li>ExpressSDK.erc721.collection.buyNFT()</li> <li>ExpressSDK.erc721.collection.bid()</li> <li>ExpressSDK.erc721.collection.acceptBid()</li> <li>ExpressSDK.erc721.collection.withdrawBid()</li> <li>ExpressSDK.erc721.collection.fetchTokenURI()</li> </ul>"},{"location":"sdk/erc1155/PersonalCollection/10_WithdrawingBid/","title":"Withdraw","text":"<pre><code>const result = await ExpressSDK.erc1155.collection.withdrawBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of the item on auction\n  bidId, //Bid Id of the buyer in an auction\n  buyerAddress // Address of the bidder\n);\n</code></pre> <p>When the bidder wants to withdraw their bid, they can do so using this function. After successful execution of the function bid will be removed from the auction and the money will be transferred back to the bidder.</p>"},{"location":"sdk/erc1155/PersonalCollection/11_CancellingSale/","title":"Cancel Sale","text":"<pre><code>const result = await ExpressSDK.erc1155.collection.cancelSale(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  sellerAddress, // Address of the seller\n  saleId // Sale Id of the item\n);\n</code></pre> <p>After the successful execution of this function, the item that was on direct sale or auction sale will be removed from sale</p>"},{"location":"sdk/erc1155/PersonalCollection/1_PersonalCollection/","title":"Create Collection","text":"<p>A personal collection can be deployed using SDK and inside a collection, user can furthur mint and trade tokens.</p> <pre><code>const result = await ExpressSDK.erc1155.collection.createCollection(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  ownerAddress, // Address of the collection creator\n  uri, // URL of Token\n  description, //description of token\n  collectionRoyalties // Royalties received by the owner\n);\n</code></pre> <p>When this function is executed an event is emitted ERC1155Deployed which contains the address of the collection.</p> <pre><code>const collectionContractAddress =\n  result.events.ERC1155Deployed.returnValues._tokenAddress;\n</code></pre> <p>This variable will contain the required contract address of the collection.</p>"},{"location":"sdk/erc1155/PersonalCollection/2_Minting/","title":"Mint","text":"<pre><code>const result = await ExpressSDK.erc1155.collection.mint(\n  web3, // Web3 instance configured with metamask provider\n  collectionAddress, // Address of the collection in which item will be minted\n  tokenId, //ID of token\n  tokenAmount, //Amount of token\n  tokenURI, //Token URI String\n  minterAddress, // Address of the owner/minter\n  royalties // Nested Array of Royalties\n);\n</code></pre> <p>After this function is executed, a tokenId will be generated corresponding to the minted item in that particular collection. This id is emitted in an event RoyaltiesSetForTokenId and it can be accessed through:</p> <pre><code>const collectionTokenId =\n  result.events.RoyaltiesSetForTokenId.returnValues.tokenId;\n</code></pre>"},{"location":"sdk/erc1155/PersonalCollection/3_Burning/","title":"Burn","text":"<pre><code>const result = await ExpressSDK.erc1155.collection.burn(\n  web3, // Web3 instance configured with metamask provider\n  collectionAddress, // Address of the collection\n  ownerAddress, // Address of token owner\n  tokenId, // Id of token to burn\n  tokenAmount //Amount of token\n);\n</code></pre> <p>Successful execution of this function burns the token associated with the respective token Id inside the collection.</p>"},{"location":"sdk/erc1155/PersonalCollection/4_Selling/","title":"Sell","text":"<pre><code>const result = await ExpressSDK.erc1155.collection.sellNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  collectionAddress, // Address of the collection\n  tokenId, // TokenId of the item in that collection\n  sellingPrice, // Selling Price of the item\n  ownerAddress, // Address of the collection owner/minter\n  tokenAmount //Amount of token\n);\n</code></pre> <p>After this function is executed the seller of the collection will be able to put up an item on sale from its collection and an event TokenMetaReturn is emitted which contains key-value pairs.</p> <pre><code>const tokenMetaEvent = result.events.TokenMetaReturn.returnValues.data;\n</code></pre> <p>tokenMetaEvent variable is an object with following key-value pair:</p> <pre><code>{\n  bidEndTime: \"0\"; // Ending time of bid if item on auction\n  bidSale: false; // Item on auction sale or not\n  bidStartTime: \"0\"; // staring time of bid if item on auction\n  collectionAddress: \"0x9095Ee504caeADfdA6EA81Ee8EC625a5827a6BF2\"; // collection address\n  currentOwner: \"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\"; // current owner address\n  directSale: true; // item on direct sale or not\n  mintedBy: \"0x675056CeEBE35C6c6aB46d7a099CAfEADe153De1\"; // minter address\n  price: \"1000\"; // selling or initial bidding price of item\n  saleId: \"8\"; // sale id of item\n  status: true; // status of item\n  tokenId: \"11\"; // token id of item\n  tokenAmount: \"10\" // amount of token\n}\n</code></pre>"},{"location":"sdk/erc1155/PersonalCollection/6_Buying/","title":"Buy","text":"<pre><code>const result = await ExpressSDK.erc721.collection.buyNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of the item\n  buyerAddress, // Address of the buyer\n  buyPrice, // Price at which item is bought\n  tokenAmount //Amount of token\n);\n</code></pre> <p>After the successful execution of this function, token ownership and price money is transferred between the new owner and previous owner respectively</p>"},{"location":"sdk/erc1155/PersonalCollection/7_Auctioning/","title":"Auction","text":"<pre><code>const result = await ExpressSDK.erc1155.collection.sellNFTByBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  collectionAddress, // Address of the collection\n  tokenId, // Token Id of the item\n  initialPrice, // Initial Price to be set for an item\n  ownerAddress, // Address of the item owner\n  tokenAmount //Amount of token\n);\n</code></pre> <p>It emits the same event emitted by sellNFT function i.e. TokenMetaReturn which can be accessed through</p> <pre><code>const tokenMetaEvent = result.events.TokenMetaReturn.returnValues.data;\n</code></pre> <p>Items on auction sale can be bid by others using saleId which can be retrieved through tokenMetaEvent.</p>"},{"location":"sdk/erc1155/PersonalCollection/8_Bidding/","title":"Bid","text":"<pre><code>const result = await ExpressSDK.erc721.collection.bid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  collectionItemSaleId, // Sale Id of the item on auction\n  bidderAddress, // Address of bidder/buyer\n  bidPrice, // Bid Price placed on item\n  tokenAmount //Amount of token\n);\n</code></pre> <p>An event is emitted in this function call:</p> <p>BidOrderReturn: It can be retrieved from the returned transaction receipt.</p> <pre><code>const bidOrderReturn = result.events.BidOrderReturn.returnValues.bid;\n</code></pre> <p>bidOrderReturn variable is an object with following key-value pairs:</p> <pre><code>{\n  buyerAddress: \"0x3A0b38AAC59429e628f3064bb0332061d0602883\"; //Address of the buyer\n  price: \"60000\"; // Buyer's bid on the item\n  saleId: \"97\"; // Sale Id of the item\n  sellerAddress: \"0xe18B1dFb94BB3CEC3B47663F997D824D9cD0f4D2\"; // Address of seller\n  withdrawn: false; // Current status of the bid\n  tokenAmount: \"10\" //Amount of token\n} \n</code></pre>"},{"location":"sdk/erc1155/PersonalCollection/9_ExecutingBid/","title":"Execute","text":"<pre><code>const result = await ExpressSDK.erc1155.collection.acceptBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  SaleId, // Sale Id of the token\n  BidId, // Bid Id of the buyer the seller wants to accept\n  sellerAddress // Address of the seller\n);\n</code></pre> <p>When the seller executes/accepts a bid before the auction\u2019s end then a new event is emitted BidExecuted which can be retrieved through the following.</p> <pre><code>const bidExecutedReturnValue = result.events.BidExecuted.returnValues.price;\n</code></pre> <p>bidExecutedReturnValue will give the amount at which the bid was accepted.</p>"},{"location":"sdk/erc1155/PublicCollection/10_CancellingSale/","title":"Cancel Sale","text":"<pre><code>const result = await ExpressSDK.erc721.order.cancelSale(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  sellerAddress, // Address of the seller\n  saleId // Sale Id of the item\n);\n</code></pre> <p>After the successful execution of this function, an Item that was on direct sale or auction sale will be removed from sale</p>"},{"location":"sdk/erc1155/PublicCollection/1_PNDC/","title":"Overview","text":"<p>Tokens can be minted and traded either through the pandora's public collection or a user can create a personal collection and mint and trade NFTs inside it.</p> <p>This section describes the functions for minting and trading through pandora's public contract(collection).</p>"},{"location":"sdk/erc1155/PublicCollection/2_Minting/","title":"Mint","text":"<pre><code>const result = await ExpressSDK.erc1155.nft.mint(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  minterAddress, // Address of Minter\n  tokenAmount, //Amount of token\n  tokenURI, // TokenURI String\n  royalties // Nested array of royalties\n);\n</code></pre> <p><pre><code>royalties for a token is of the form: [ [recipientAddress1, royaltyFraction1],\n                                        [recipientAddress2, royaltyFraction2],\n                                         .\n                                         .\n                                        [recipientAddressN, royaltyFractionN] ]\n</code></pre> Note: N can be atmost 10</p> <p>It returns the receipt of the on-chain transaction. Information from Emitted Events can be retrieved by looking at the transaction receipt. Two events are emitted in this function call:</p> <p>-&gt; TransferSingle: It can be retrieved from the returned transaction receipt.</p> <pre><code>const transferEvent = result.events.TransferSingle.returnValues;\n</code></pre> <p>transferEvent variable is an object with following key-value pair:</p> <pre><code>{\n  operator: \"0x0000000000000000000000000000000000000000\", //zero address\n  from: \"0x0000000000000000000000000000000000000000\", // zero address\n  to: \"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\", // minter address\n  tokenId: \"11\" // token id of minted token,\n  value: 5, //token Amount\n}\n</code></pre> <p>-&gt; RoyaltiesSetForTokenId: It can also be retrieved in a similar manner</p> <pre><code>const royaltiesEvent = result.events.RoyaltiesSetForTokenId.returnValues;\n</code></pre> <p>royaltiesEvent variable is an object with following key-value pair:</p> <pre><code>{\n  royalties: [[\"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\", \"100\"]] // array of royalties\n  tokenId: \"11\" // token id of minted token\n}\n</code></pre> <p>Token Minted on a specific network can be put on Sale or Auction further on the same Network.</p>"},{"location":"sdk/erc1155/PublicCollection/3_Burning/","title":"Burn","text":"<pre><code>const result = await ExpressSDK.erc1155.nft.burn(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  ownerAddress, // Address of token owner\n  tokenId // Id of token to burn\n  tokenAmount //Amount of token to burn\n);\n</code></pre> <p>Successful execution of this function will burn token associated to respective tokenId.</p>"},{"location":"sdk/erc1155/PublicCollection/4_Selling/","title":"Sell","text":"<pre><code>const result = await ExpressSDK.erc1155.order.sellNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  tokenId, // Token Id of NFT\n  tokenPrice, // Selling Price of NFT\n  ownerAddress, // Address of current owner\n  tokenAmount // Amount of token to sell\n);\n</code></pre> <p>An event is emitted in this function call:</p> <p>TokenMetaReturn: It can be retrieved from the returned transaction receipt.</p> <pre><code>const tokenMetaEvent = result.events.TokenMetaReturn.returnValues.data;\n</code></pre> <p>tokenMetaEvent variable is an object with following key-value pair:</p> <pre><code>{\n     collectionAddress:  \"0x9095Ee504caeADfdA6EA81Ee8EC625a5827a6BF2\"; //Address of Collection\n     tokenId: \"2\"; //ID of token\n     numberOfTokens: \"10\"; //Amount of token to mint\n     price: \"100\"; //Base Selling price\n     directSale: true; //Direct sale or not\n     bidSale: false; //Bid Sale or not\n     status: true; //Status of token\n     currentOwner: \"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\"; //Current owner of token\n}\n</code></pre>"},{"location":"sdk/erc1155/PublicCollection/5_Buying/","title":"Buy","text":"<pre><code>const result = await ExpressSDK.erc1155.order.buyNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of NFT\n  buyerAddress, // Address of buyer\n  price // Price of item\n  amount //Amount of token\n);\n</code></pre> <p>After the successful execution of this function, token ownership and price money are transferred between the new owner and previous owner respectively.</p>"},{"location":"sdk/erc1155/PublicCollection/6_Auctioning/","title":"Auction","text":"<pre><code>const result = await ExpressSDK.erc1155.order.sellNFTByBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  tokenId, // Token Id of NFT\n  initialPrice, // Initial Bidding Price of NFT\n  ownerAddress, // Address of current owner\n  amount // Amount of Token\n);\n</code></pre> <p>It emits the same event emitted by sellNFT function i.e. TokenMetaReturn.</p> <p>Items on auction sale can be bid by others using saleId.</p>"},{"location":"sdk/erc1155/PublicCollection/7_Bidding/","title":"Bid","text":"<pre><code>const result = await ExpressSDK.erc1155.order.bid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of NFT\n  buyerAddress, // Address of bidder/buyer\n  bidPrice // Bid Price placed on item\n  amount // Amount of token\n);\n</code></pre> <p>An event is emitted in this function call:</p> <p>BidOrderReturn: It can be retrieved from the returned transaction receipt.</p> <pre><code>const bidOrderReturn = result.events.BidOrderReturn.returnValues.bid;\n</code></pre> <p>bidOrderReturn variable is an object with following key-value pairs:</p> <pre><code>{\n  saleId: \"97\"; // Sale Id of the item\n  tokenAmount: \"10\" //Amount of token\n  sellerAddress: \"0xe18B1dFb94BB3CEC3B47663F997D824D9cD0f4D2\"; // Address of seller\n  buyerAddress: \"0x3A0b38AAC59429e628f3064bb0332061d0602883\"; //Address of the buyer\n  price: \"60000\"; // Buyer's bid on the item\n  withdrawn: false; // Current status of the bid\n}\n</code></pre>"},{"location":"sdk/erc1155/PublicCollection/8_ExcecutingBid/","title":"Execute Bid","text":"<pre><code>const result = await ExpressSDK.erc1155.order.acceptBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  SaleId, // Sale Id of the token\n  BidId, // Bid Id of the buyer the seller wants to accept\n  sellerAddress, // Address of the seller\n);\n</code></pre> <p>When the seller executes/accepts a bid before the auction\u2019s end then a new event is emitted  BidExecuted which can be retrieved through the following.</p> <pre><code>const bidExecutedReturnValue = result.events.BidExecuted.returnValues.price;\n</code></pre> <p>bidExecutedReturnValue will give the amount at which the bid was accepted.</p>"},{"location":"sdk/erc1155/PublicCollection/9_WithdrawingBid/","title":"Withdraw Bid","text":"<pre><code>const result = await ExpressSDK.erc1155.order.withdrawBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of the item on auction\n  bidId, //Bid Id of the buyer in an auction\n  buyerAddress // Address of the bidder\n);\n</code></pre> <p>When the bidder wants to withdraw their bid, they can do so using this function. After successful execution of the function bid will be removed from the auction and the money will be transferred back to the bidder.</p>"},{"location":"sdk/erc721/PersonalCollection/10_WithdrawingBid/","title":"Withdraw","text":"<pre><code>const result = await ExpressSDK.erc721.collection.withdrawBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of the item on auction\n  bidId, //Bid Id of the buyer in an auction\n  buyerAddress // Address of the bidder\n);\n</code></pre> <p>When the bidder wants to withdraw their bid, they can do so using this function. After successful execution of the function bid will be removed from the auction and the money will be transferred back to the bidder.</p>"},{"location":"sdk/erc721/PersonalCollection/11_CancellingSale/","title":"Cancel Sale","text":"<pre><code>const result = await ExpressSDK.erc721.collection.cancelSale(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  sellerAddress, // Address of the seller\n  saleId // Sale Id of the item\n);\n</code></pre> <p>After the successful execution of this function, the item that was on direct sale or auction sale will be removed from sale.</p>"},{"location":"sdk/erc721/PersonalCollection/12_TokenURICollection/","title":"Token URI","text":"<pre><code>const result = await ExpressSDK.erc721.collection.fetchTokenURI(\n  web3, // Web3 instance configured with metamask\n  collectionAddress, // Address of the collection\n  tokenId // Id of token to fetch tokenURI of\n);\n</code></pre> <p>Successful execution of this function will fetch the tokenURI associated with the respective token Id inside the collection.</p>"},{"location":"sdk/erc721/PersonalCollection/1_PersonalCollection/","title":"Create Collection","text":"<p>A personal collection can be deployed using SDK and inside a collection, user can furthur mint and trade tokens.</p> <pre><code>const result = await ExpressSDK.erc721.collection.createCollection(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  ownerAddress, // Address of the collection creator\n  name, // Name of the collection\n  symbol, // Symbol of the collection\n  description, // Description of the collection\n  collectionRoyalties // Royalties received by the owner\n);\n</code></pre> <p>When this function is executed an event is emitted ERC721Deployed which contains the address of the collection.</p> <pre><code>const collectionContractAddress =\n  result.events.ERC721Deployed.returnValues._tokenAddress;\n</code></pre> <p>This variable will contain the required contract address of the collection.</p>"},{"location":"sdk/erc721/PersonalCollection/2_Minting/","title":"Mint","text":"<pre><code>const result = await ExpressSDK.erc721.collection.mint(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  collectionAddress, // Address of the collection in which item will be minted\n  tokenURI, //Token URI String\n  minterAddress, // Address of the owner/minter\n  royalties // Nested Array of Royalties\n);\n</code></pre> <p>After this function is executed, a tokenId will be generated corresponding to the minted item in that particular collection. This id is emitted in an event RoyaltiesSetForTokenId and it can be accessed through:</p> <pre><code>const collectionTokenId =\n  result.events.RoyaltiesSetForTokenId.returnValues.tokenId;\n</code></pre>"},{"location":"sdk/erc721/PersonalCollection/3_BatchMinting/","title":"BatchMint","text":"<pre><code>const result = await ExpressSDK.erc721.collection.batchMint(\n  web3, // Web3 instance configured with metamask provider\n  collectionAddress, // Address of the collection\n  minterAddress, // Address of Minter\n  totalNFT, // Number of tokens to mint\n  arraytokenURI, // array of TokenURI String for each token\n  royalties // array of royalties for each token\n);\n</code></pre> <p>The token Ids for minted tokens can be retrieved through the respective emitted events. (Transfer and RoyaltiesSetForTokenId events are emitted for each token minted through batchMint.)</p>"},{"location":"sdk/erc721/PersonalCollection/4_Burning/","title":"Burn","text":"<pre><code>const result = await ExpressSDK.erc721.collection.burn(\n  web3, // Web3 instance configured with metamask provider\n  collectionAddress, // Address of the collection\n  ownerAddress, // Address of token owner\n  tokenId // Id of token to burn\n);\n</code></pre> <p>Successful execution of this function burns the token associated with the respective token Id inside the collection.</p>"},{"location":"sdk/erc721/PersonalCollection/5_Selling/","title":"Sell","text":"<pre><code>const result = await ExpressSDK.erc721.collection.sellNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  collectionAddress, // Address of the collection\n  tokenId, // TokenId of the item in that collection\n  sellingPrice, // Selling Price of the item\n  ownerAddress // Address of the collection owner/minter\n);\n</code></pre> <p>After this function is executed the seller of the collection will be able to put up an item on sale from its collection and an event TokenMetaReturn is emitted which contains key-value pairs.</p> <pre><code>const tokenMetaEvent = result.events.TokenMetaReturn.returnValues.data;\n</code></pre> <p>tokenMetaEvent variable is an object with following key-value pair:</p> <pre><code>{\n  bidEndTime: \"0\"; // Ending time of bid if item on auction\n  bidSale: false; // Item on auction sale or not\n  bidStartTime: \"0\"; // staring time of bid if item on auction\n  collectionAddress: \"0x9095Ee504caeADfdA6EA81Ee8EC625a5827a6BF2\"; // collection address\n  currentOwner: \"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\"; // current owner address\n  directSale: true; // item on direct sale or not\n  mintedBy: \"0x675056CeEBE35C6c6aB46d7a099CAfEADe153De1\"; // minter address\n  price: \"1000\"; // selling or initial bidding price of item\n  saleId: \"8\"; // sale id of item\n  status: true; // status of item\n  tokenId: \"11\"; // token id of item\n}\n</code></pre>"},{"location":"sdk/erc721/PersonalCollection/6_Buying/","title":"Buy","text":"<pre><code>const result = await ExpressSDK.erc721.collection.buyNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of the item\n  buyerAddress, // Address of the buyer\n  buyPrice // Price at which item is bought\n);\n</code></pre> <p>After the successful execution of this function, token ownership and price money is transferred between the new owner and previous owner respectively</p>"},{"location":"sdk/erc721/PersonalCollection/7_Auctioning/","title":"Auction","text":"<pre><code>const result = await ExpressSDK.erc721.collection.sellNFTByBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  collectionAddress, // Address of the collection\n  tokenId, // Token Id of the item\n  initialPrice, // Initial Price to be set for an item\n  ownerAddress, // Address of the item owner\n  auctionTime // Auction Time Period in seconds, i.e 120 is equal to 120s.\n);\n</code></pre> <p>It emits the same event emitted by sellNFT function i.e. TokenMetaReturn which can be accessed through</p> <pre><code>const tokenMetaEvent = result.events.TokenMetaReturn.returnValues.data;\n</code></pre> <p>Items on auction sale can be bid by others using saleId which can be retrieved through tokenMetaEvent.</p>"},{"location":"sdk/erc721/PersonalCollection/8_Bidding/","title":"Bid","text":"<pre><code>const result = await ExpressSDK.erc721.collection.bid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  collectionItemSaleId, // Sale Id of the item on auction\n  bidderAddress, // Address of bidder/buyer\n  bidPrice // Bid Price placed on item\n);\n</code></pre> <p>An event is emitted in this function call:</p> <p>BidOrderReturn: It can be retrieved from the returned transaction receipt.</p> <pre><code>const bidOrderReturn = result.events.BidOrderReturn.returnValues.bid;\n</code></pre> <p>bidOrderReturn variable is an object with following key-value pairs:</p> <pre><code>{\n  buyerAddress: \"0x3A0b38AAC59429e628f3064bb0332061d0602883\"; //Address of the buyer\n  price: \"60000\"; // Buyer's bid on the item\n  saleId: \"97\"; // Sale Id of the item\n  sellerAddress: \"0xe18B1dFb94BB3CEC3B47663F997D824D9cD0f4D2\"; // Address of seller\n  withdrawn: false; // Current status of the bid\n} \n</code></pre>"},{"location":"sdk/erc721/PersonalCollection/9_ExecutingBid/","title":"Execute","text":"<pre><code>const result = await ExpressSDK.erc721.collection.acceptBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  SaleId, // Sale Id of the token\n  BidId, // Bid Id of the buyer the seller wants to accept\n  sellerAddress // Address of the seller\n);\n</code></pre> <p>When the seller executes/accepts a bid before the auction\u2019s end then a new event is emitted BidExecuted which can be retrieved through the following.</p> <pre><code>const bidExecutedReturnValue = result.events.BidExecuted.returnValues.price;\n</code></pre> <p>bidExecutedReturnValue will give the amount at which the bid was accepted.</p>"},{"location":"sdk/erc721/PublicCollection/10_WithdrawBid/","title":"Withdraw Bid","text":"<pre><code>const result = await ExpressSDK.erc721.order.withdrawBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of the item on auction\n  bidId, //Bid Id of the buyer in an auction\n  buyerAddress // Address of the bidder\n);\n</code></pre> <p>When the bidder wants to withdraw their bid, they can do so using this function. After successful execution of the function bid will be removed from the auction and the money will be transferred back to the bidder.</p>"},{"location":"sdk/erc721/PublicCollection/11_CancellingSale/","title":"Cancel Sale","text":"<pre><code>const result = await ExpressSDK.erc721.order.cancelSale(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  sellerAddress, // Address of the seller\n  saleId // Sale Id of the item\n);\n</code></pre> <p>After the successful execution of this function, an Item that was on direct sale or auction sale will be removed from sale</p>"},{"location":"sdk/erc721/PublicCollection/12_TokenURI/","title":"Token URI","text":"<pre><code>const result = await ExpressSDK.erc721.nft.fetchTokenURI(\n  web3, // Web3 instance configured with metamask\n  chainId, // Network id of blockchain\n  tokenId // Id of token to fetch tokenURI of\n);\n</code></pre> <p>Successful execution of this function will fetch tokenURI of the token.</p>"},{"location":"sdk/erc721/PublicCollection/1_PNDC/","title":"Overview","text":"<p>Tokens can be minted and traded either through the pandora's public collection or a user can create a personal collection and mint and trade NFTs inside it.</p> <p>This section describes the functions for minting and trading through pandora's public contract(collection).</p>"},{"location":"sdk/erc721/PublicCollection/2_Minting/","title":"Mint","text":"<pre><code>const result = await ExpressSDK.erc721.nft.mint(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  minterAddress, // Address of Minter\n  tokenURI, // TokenURI String\n  royalties // Nested array of royalties\n);\n</code></pre> <p><pre><code>royalties for a token is of the form: [ [recipientAddress1, royaltyFraction1],\n                                        [recipientAddress2, royaltyFraction2],\n                                         .\n                                         .\n                                        [recipientAddressN, royaltyFractionN] ]\n</code></pre> Note: N can be atmost 10</p> <p>It returns the receipt of the on-chain transaction. Information from Emitted Events can be retrieved by looking at the transaction receipt. Two events are emitted in this function call:</p> <p>-&gt; Transfer: It can be retrieved from the returned transaction receipt.</p> <pre><code>const transferEvent = result.events.Transfer.returnValues;\n</code></pre> <p>transferEvent variable is an object with following key-value pair:</p> <pre><code>{\n  from: \"0x0000000000000000000000000000000000000000\", // zero address\n  to: \"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\", // minter address\n  tokenId: \"11\" // token id of minted token\n}\n</code></pre> <p>-&gt; RoyaltiesSetForTokenId: It can also be retrieved in a similar manner</p> <pre><code>const royaltiesEvent = result.events.RoyaltiesSetForTokenId.returnValues;\n</code></pre> <p>royaltiesEvent variable is an object with following key-value pair:</p> <pre><code>{\n  royalties: [[\"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\", \"100\"]] // array of royalties\n  tokenId: \"11\" // token id of minted token\n}\n</code></pre> <p>Token Minted on a specific network can be put on Sale or Auction further on the same Network.</p>"},{"location":"sdk/erc721/PublicCollection/3_BatchMinting/","title":"BatchMint","text":"<pre><code>const result = await ExpressSDK.erc721.nft.batchMint(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  minterAddress, // Address of Minter\n  totalNFT, // Number of tokens to mint\n  arraytokenURI, // array of TokenURI String for each token\n  royalties // array of royalties for each token\n);\n</code></pre> <pre><code>    royalties are of the form: [ royaltyArrayForToken1,\n                                 royaltyArrayForToken2,\n                                 .\n                                 .\n                                 royaltyArrayForTokenN ]\n</code></pre> <p>It emits the same events as by Mint for all N tokens where N is the total number of tokens minted through batchMint.</p>"},{"location":"sdk/erc721/PublicCollection/4_Burning/","title":"Burn","text":"<pre><code>const result = await ExpressSDK.erc721.nft.burn(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  ownerAddress, // Address of token owner\n  tokenId // Id of token to burn\n);\n</code></pre> <p>Successful execution of this function will burn token associated to respective tokenId.</p>"},{"location":"sdk/erc721/PublicCollection/5_Selling/","title":"Sell","text":"<pre><code>const result = await ExpressSDK.erc721.order.sellNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  tokenId, // Token Id of NFT\n  tokenPrice, // Selling Price of NFT\n  ownerAddress // Address of current owner\n);\n</code></pre> <p>An event is emitted in this function call:</p> <p>TokenMetaReturn: It can be retrieved from the returned transaction receipt.</p> <pre><code>const tokenMetaEvent = result.events.TokenMetaReturn.returnValues.data;\n</code></pre> <p>tokenMetaEvent variable is an object with following key-value pair:</p> <pre><code>{\n  bidEndTime: \"0\"; // Ending time of bid if item on auction\n  bidSale: false; // Item on auction sale or not\n  bidStartTime: \"0\"; // staring time of bid if item on auction\n  collectionAddress: \"0x9095Ee504caeADfdA6EA81Ee8EC625a5827a6BF2\"; // collection address\n  currentOwner: \"0xbEc53EBdf7833B9d8747522287d5781d265A3e87\"; // current owner address\n  directSale: true; // item on direct sale or not\n  mintedBy: \"0x675056CeEBE35C6c6aB46d7a099CAfEADe153De1\"; // minter address\n  price: \"1000\"; // selling or initial bidding price of item\n  saleId: \"8\"; // sale id of item\n  status: true; // status of item\n  tokenId: \"11\"; // token id of item\n}\n</code></pre>"},{"location":"sdk/erc721/PublicCollection/6_Buying/","title":"Buy","text":"<pre><code>const result = await ExpressSDK.erc721.order.buyNFT(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of NFT\n  buyerAddress, // Address of buyer\n  price // Price of item\n);\n</code></pre> <p>After the successful execution of this function, token ownership and price money are transferred between the new owner and previous owner respectively.</p>"},{"location":"sdk/erc721/PublicCollection/7_Auctioning/","title":"Auction","text":"<pre><code>const result = await ExpressSDK.erc721.order.sellNFTByBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  tokenId, // Token Id of NFT\n  initialPrice, // Initial Bidding Price of NFT\n  ownerAddress, // Address of current owner\n  auctionTime // Auction Time Period in seconds\n);\n</code></pre> <p>It emits the same event emitted by sellNFT function i.e. TokenMetaReturn.</p> <p>Items on auction sale can be bid by others using saleId.</p>"},{"location":"sdk/erc721/PublicCollection/8_Bidding/","title":"Bid","text":"<pre><code>const result = await ExpressSDK.erc721.order.bid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  saleId, // Sale Id of NFT\n  buyerAddress, // Address of bidder/buyer\n  bidPrice // Bid Price placed on item\n);\n</code></pre> <p>An event is emitted in this function call:</p> <p>BidOrderReturn: It can be retrieved from the returned transaction receipt.</p> <pre><code>const bidOrderReturn = result.events.BidOrderReturn.returnValues.bid;\n</code></pre> <p>bidOrderReturn variable is an object with following key-value pairs:</p> <pre><code>{\n  buyerAddress: \"0x3A0b38AAC59429e628f3064bb0332061d0602883\"; //Address of the buyer\n  price: \"60000\"; // Buyer's bid on the item\n  saleId: \"97\"; // Sale Id of the item\n  sellerAddress: \"0xe18B1dFb94BB3CEC3B47663F997D824D9cD0f4D2\"; // Address of seller\n  withdrawn: false; // Current status of the bid\n}\n</code></pre>"},{"location":"sdk/erc721/PublicCollection/9_ExecutingBid/","title":"Execute Bid","text":"<pre><code>const result = await ExpressSDK.erc721.order.acceptBid(\n  web3, // Web3 instance configured with metamask provider\n  chainId, // Network id of blockchain\n  SaleId, // Sale Id of the token\n  BidId, // Bid Id of the buyer the seller wants to accept\n  sellerAddress // Address of the seller\n);\n</code></pre> <p>When the seller executes/accepts a bid before the auction\u2019s end then a new event is emitted  BidExecuted which can be retrieved through the following.</p> <pre><code>const bidExecutedReturnValue = result.events.BidExecuted.returnValues.price;\n</code></pre> <p>bidExecutedReturnValue will give the amount at which the bid was accepted.</p>"},{"location":"sdk/pinata/1_UploadingToPinata/","title":"Pinata","text":""},{"location":"sdk/pinata/1_UploadingToPinata/#upload-nfts-to-pinata-cloud-service","title":"Upload NFTs to Pinata Cloud Service:","text":"<pre><code>const result = await PandoraSDK.pinata.upload(\n  nftImageFile, //File to be uploaded to Pinata\n  nftDescription, // Description of the NFT\n  pinataApiKey, // Pinata API Key\n  pinataSecretApiKey // Pinata Secret API Key\n);\n</code></pre> <p>After uploading the NFT Image successfully, we can get the IPFS link of the image from the response by getting the IPFS Hash.</p> <pre><code>const hash = result.data.IpfsHash;\n</code></pre> <p>And appending that hash to the following link</p> <pre><code>\"&lt;https://gateway.pinata.cloud/ipfs/{hash}&gt;\"\n</code></pre>"},{"location":"sdk/pinata/1_UploadingToPinata/#upload-json-data-to-pinata-cloud-service","title":"Upload JSON data to Pinata Cloud Service:","text":"<pre><code>const result = await PandoraSDK.pinata.pinJSON(\n  pinataAPIKeyJSON, // Pinata API Key\n  pinataSecretApiKeyJSON, // Pinata Secret API Key\n  pinataJSONData // JSON data to upload\n);\n</code></pre>"},{"location":"smart-conrtracts/1_ContractsDeployment/","title":"Contract deployment","text":""},{"location":"smart-conrtracts/1_ContractsDeployment/#procedure-to-deploy-contracts-on-local-as-well-as-public-blockchains","title":"Procedure to deploy contracts on local as well as public blockchains.","text":"<p>\u2192Clone the Repository Modular-Contract</p> <p>\u2192Install the dependencies by running -</p> <pre><code>    npm install\n</code></pre>"},{"location":"smart-conrtracts/1_ContractsDeployment/#for-deployment-on-the-local-network","title":"For deployment on the local network:","text":"<p>\u2192Start truffle development console by running following command in terminal -</p> <pre><code>    truffle develop\n</code></pre> <p>\u2192For compiling and deploying on the local blockchain, run -</p> <pre><code>    compile --all\n</code></pre> <pre><code>    migrate --reset\n</code></pre>"},{"location":"smart-conrtracts/1_ContractsDeployment/#for-deployment-on-the-public-test-network","title":"For deployment on the public test network:","text":"<p>\u2192Create a \u2018.env\u2019 file in the root directory and add a private key :</p> <pre><code>    PK = &lt;PRIVATE_KEY&gt;\n    INFURA_API = &lt;YOUR INFURA API&gt;\n    BSC_API = &lt;BINANCE API&gt;\n</code></pre> <p>\u2192For compiling and deploying on the public test blockchain, run -</p> <pre><code>    truffle compile --all\n</code></pre> <pre><code>    truffle migrate --reset --network testnet\n</code></pre>"},{"location":"smart-conrtracts/1_Overview/","title":"Overview","text":"<p>Pandora Protocol consists of a variety of Smart Contracts and Libraries for minting, buying, selling, auctioning, and bidding tokens of ERC721 and ERC1155 standard.</p>"},{"location":"smart-conrtracts/1_Overview/#contracts-overview","title":"Contracts Overview","text":"<p>Tokens can be created either using Pandora\u2019s public contract PNDC_ERC721/PNDC_ERC1155 or a collection can be deployed using the TokenFactory/TokenFactory1155 contract and then tokens can be created inside that collection.</p> <p>TokenERC721/TokenERC1155 contract contains boilerplate functions for all the collection contracts that will be deployed.</p> <p>NFTFactoryContract/NFTFactoryContract1155 contains functions for selling and buying tokens.</p> <p>NFTBid/NFTBid1155 contract contains functions for auction sale and bidding.</p> <p>NFTStorage/NFTStorage1155 contract is used as a storage contract for all the sale and collection data.</p>"},{"location":"smart-conrtracts/1_Overview/#libraries-overview","title":"Libraries Overview","text":"<p>Libraries are used by Smart Contracts to hold useful data in an organized way.</p> <p>LibShare library contains the royalty share structure.</p> <p>LibMeta/LibMeta1155 library contains the sales metadata structure.</p> <p>LibCollection/LibCollection1155 library contains the collections metadata structure.</p> <p>LibBid/LibBid1155 library contains the bid Order structure.</p> <p>LibERC721/LibERC1155 library contains a function to deploy a new ERC721 contract(collection).</p>"},{"location":"smart-conrtracts/2_Architecture/","title":"Architecture","text":"<p>Contracts are built using openzeppelin\u2019s upgradeable smart contracts library. So the smart contract code can be updated to support new features, fix bugs, etc.</p> <p>Functionalities are divided into different parts and some contracts are inherited by other contracts as well as by openzeppelin\u2019s contracts.</p> <p>The TokenFactory contract inherits the NFTBid contract which inherits NFTFactoryContract which again inherits the NFTStorage contract.</p> <p>Similarly in ERC1155 part, The TokenFactory1155 contract inherits the NFTBid1155 contract which inherits NFTFactoryContract115 which again inherits the NFTStorage1155 contract.</p>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.10_CancellingSale/","title":"CancelSale","text":"<p>NFTs can be removed from direct sale or auction sale using cancelSale function of NFTFactoryContract1155 contract.</p> <pre><code>    cancelSale(\n        uint256 _saleId\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on sale</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.11_BidOrderBook/","title":"BidOrderBook","text":"<p>All the bids are stored in mapping Bids which maps _saleId to an array of BidOrder struct.</p> <p>Each element of the array represents a bid with the last element as recent bid.</p> <pre><code>    mapping(uint256 =&gt; LibBid.BidOrder[]) public Bids;\n</code></pre>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.1_Functions/","title":"Overview","text":"<p>Pandora Protocol's Smart Contracts have various functionalities like Minting, Selling, Buying, Auctioning tokens as well as creating personal collections and executing these functionalities inside collections.</p> <p>A few major functions for ERC1155 standard are mentioned in the following pages.</p>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.2_Collections/","title":"Collection","text":"<p>Collections can be deployed using the deployERC1155 function of the TokenFactory1155 contract</p> <pre><code>    deployERC1155(\n        string memory _uri, \n        string memory description, \n        LibShare.Share[] memory royalties\n    )\n</code></pre> <ul> <li>_uri: Base URI</li> <li>description: Description of the collection</li> <li>royalties: array of Share struct</li> </ul> <p>Tokens can be created inside collections and can be sold, bought, and auctioned.</p>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.3_minting/","title":"Mint","text":"<p>Minting is done using Mint function in both (PNDC_ERC1155 and TokenERC1155) contracts.</p> <p>For PNDC_ERC1155</p> <pre><code>    mint(\n        address account,\n        uint256 amount,\n        bytes memory data,\n        string memory uri,\n        LibShare.Share[] memory royalties\n    ) \n</code></pre> <ul> <li>account: Address of the owner</li> <li>amount: Amount of Token</li> <li>data: Token data</li> <li>uri: Token Uri</li> <li>royalties: array of Share struct</li> </ul> <p>For TokenERC1155</p> <pre><code>    mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        string memory _uri,\n        bytes memory data\n    ) \n</code></pre> <ul> <li>account: Address of the owner</li> <li>id: ID of token</li> <li>amount: Amount of token</li> <li>_uri: Token Uri</li> <li>royaltiesSet: RoyaltiesSet struct</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.5_Royalties/","title":"Royalties","text":"<p>Royalties for a token can be retrieved using getRoyalties function in both (PNDC_ERC1155 and TokenERC1155) contracts.</p> <pre><code>    getRoyalties(\n        uint256 _tokenId\n    )\n</code></pre> <p>It returns an array of Share struct.</p> <p>In the TokenERC1155 contract, there are additional functions for setting Royalties by token Id and for collections.</p> <p>By TokenId-</p> <pre><code>    setRoyaltiesByTokenId(\n        uint256 _tokenId,\n        RoyaltiesSet memory royaltiesSet\n    )\n</code></pre> <ul> <li>_tokenId: Id of token whose royalty is getting set</li> <li>royaltiesSet: RoyaltiesSet struct</li> </ul> <p>It emits an event:</p> <pre><code>RoyaltiesSetForTokenId(_tokenId, royaltiesSet.royalties);\n</code></pre> <p>For Collections-</p> <pre><code>    setRoyaltiesForCollection(\n        LibShare.Share[] memory royalties\n    )\n</code></pre> <ul> <li>royalties: array of Share struct</li> </ul> <p>It emits an event:</p> <pre><code>RoyaltiesSetForCollection(royalties);\n</code></pre>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.6_Selling/","title":"Sell","text":"<p>Selling of NFTs can be performed using sellNFT function of NFTFactoryContract1155.sol contract.</p> <pre><code>    sellNFT(\n        address _collectionAddress,\n        uint256 _tokenId,\n        uint256 _price,\n        uint256 _amount\n    )\n</code></pre> <ul> <li>_collectionAddress: address of collection</li> <li>_tokenId: Id of token willing to sell</li> <li>_price: selling price</li> <li>_amount: Amount of Token</li> </ul> <p>It emits an event:</p> <pre><code>    TokenMetaReturn(meta, _tokenIdTracker.current())\n</code></pre> <ul> <li>meta: TokenMeta struct</li> <li>_tokenIdTracker.current(): a counter tracking current token Id</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.7_Buying/","title":"Buy","text":"<p>NFTs can be bought using buyNFT function of NFTFactoryContract1155.sol contract.</p> <pre><code>    BuyNFT(\n        uint256 _saleId,\n        uint256 _amount\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on sale</li> <li>_amount: Amount of Token.</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.8_Auctioning/","title":"Auction","text":"<p>NFTs can also be put on Auction Sale using sellNFT_byBid function of NFTBid1155 contract. An auction sale is the sale of goods through a bidding process.</p> <pre><code>    SellNFT_byBid(\n        address _collectionAddress,\n        uint256 _tokenId,\n        uint256 _price,\n        uint256 _amount\n    )\n</code></pre> <ul> <li>_collectionAddress: address of collection</li> <li>_tokenId: Id of token willing to sell</li> <li>_price: selling price</li> <li>_amount: Amount of Tokens</li> </ul> <p>It emits an event:</p> <pre><code>    TokenMetaReturn(meta, _tokenIdTracker.current())\n</code></pre> <ul> <li>meta: TokenMeta struct</li> <li>_tokenIdTracker.current(): a counter tracking current token Id</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.9_Bidding/","title":"Bid","text":"<p>Anyone can bid on NFT on auction sale using bid function of NFTBid1155 contract.</p> <pre><code>    Bid(\n        uint256 _saleId,\n        uint256 _amount\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on auction sale</li> <li>_amount: Amount of Tokens</li> </ul> <p>It emits an event:</p> <pre><code>BidOrderReturn(bid);\n</code></pre> <ul> <li>bid: BidOrder struct</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.9_Bidding/#executing-bid","title":"Executing Bid","text":"<p>A bid can be executed by the owner of NFT using executeBidOrder function of NFTBid1155 contract.</p> <pre><code>    executeBidOrder(\n        uint256 _saleId,\n        uint256 _bidOrderID\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on auction sale</li> <li>_bidOrderId: Id of bid order</li> </ul> <p>It emits an event:</p> <pre><code>BidExecuted(Bids[_saleId][_bidOrderID].price)\n</code></pre> <ul> <li>Bids[_saleId][_bidorderid].price: price at which bid executed</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/3.9_Bidding/#withdrawing-bid","title":"Withdrawing Bid","text":"<p>Other bidders can withdraw their money using withdrawBidMoney function of NFTBid contract.</p> <pre><code>    withdrawBidMoney(\n        uint256 _saleId,\n        uint256 _bidId\n    )\n</code></pre> <ul> <li>_saleId: Id of the item that was on auction sale</li> <li>_bidId: Id of that bid</li> </ul>"},{"location":"smart-conrtracts/erc1155/4_Functions/Burn/","title":"Burn","text":"<p>Minted NFTs can be burned by the owner using burn function of both PNDC_ERC1155 and TokenERC1155 contract.</p> <pre><code>    burn(\n        uint256 _id, \n        uint256 _amount\n        ) \n</code></pre> <ul> <li>_id: ID of Token</li> <li>_amount: Amount of Token to burn</li> </ul>"},{"location":"smart-conrtracts/erc1155/Structs/1_Structs/","title":"Overview","text":"<p>Structs are special data types in solidity which hold data of different types.</p> <p>There are many structs used in the Smart Contracts which are covered in this section.</p>"},{"location":"smart-conrtracts/erc1155/Structs/2_RoyalitiesSet/","title":"RoyaltiesSet","text":"<pre><code>    struct RoyaltiesSet {\n        bool set;\n        LibShare.Share[] royalties;\n    }\n</code></pre> <p>\u2192set: boolean value</p> <p>\u2192royalties: array of Share struct</p>"},{"location":"smart-conrtracts/erc1155/Structs/3_TokenMeta/","title":"TokenMeta","text":"<pre><code>    struct TokenMeta {\n        address collectionAddress;\n        uint256 tokenId;\n        uint256 numberOfTokens;\n        uint256 price;\n        bool directSale;\n        bool bidSale;\n        bool status;\n        address currentOwner;\n    }\n</code></pre> <p>\u2192collectionAddress: collection address</p> <p>\u2192tokenId: Id of token</p> <p>\u2192numberOfTokens: Amount of tokens</p> <p>\u2192price: selling price/base bidding price</p> <p>\u2192directSale: item on direct sale or not</p> <p>\u2192bidSale: item on bid sale or not</p> <p>\u2192status: status of item</p> <p>\u2192currentOwner: address of current owner</p>"},{"location":"smart-conrtracts/erc1155/Structs/4_BidOrder/","title":"BidOrder","text":"<pre><code>    struct BidOrder {\n        uint256 saleId;\n        uint256 numberOfTokens;\n        address sellerAddress;\n        address buyerAddress;\n        uint256 price;\n        bool withdrawn;\n    }\n</code></pre> <p>\u2192saleId: Id of item on sale</p> <p>\u2192numberOfTokens: Amount of Tokens</p> <p>\u2192sellerAddress: address of the current owner</p> <p>\u2192buyerAddress: address of the current bidder</p> <p>\u2192price: current bid price</p> <p>\u2192withdrawn: bid value is withdrawn or not</p>"},{"location":"smart-conrtracts/erc1155/Structs/Share/","title":"Share","text":"<pre><code>    struct Share {\n        address payable account;\n        uint96 value;\n    }\n</code></pre> <p>\u2192account: address of royalty receiver</p> <p>\u2192value: the amount of royalty</p>"},{"location":"smart-conrtracts/erc721/3_Functions/3.10_CancellingSale/","title":"CancelSale","text":"<p>NFTs can be removed from direct sale or auction sale using cancelSale function of NFTFactoryContract contract.</p> <pre><code>    cancelSale(\n        uint256 _saleId\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on sale</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.11_BidOrderBook/","title":"BidOrderBook","text":"<p>All the bids are stored in mapping Bids which maps _saleId to an array of BidOrder struct.</p> <p>Each element of the array represents a bid with the last element as recent bid.</p> <pre><code>    mapping(uint256 =&gt; LibBid.BidOrder[]) public Bids;\n</code></pre>"},{"location":"smart-conrtracts/erc721/3_Functions/3.1_Functions/","title":"Overview","text":"<p>Pandora Protocol's Smart Contracts have various functionalities like Minting, Selling, Buying, Auctioning tokens as well as creating personal collections and executing these functionalities inside collections.</p> <p>A few major functions for ERC721 standard are mentioned in the following pages.</p>"},{"location":"smart-conrtracts/erc721/3_Functions/3.2_Collections/","title":"Collection","text":"<p>Collections can be deployed using the deployERC721 function of the TokenFactory contract</p> <pre><code>    deployERC721(\n        string memory name,\n        string memory symbol,\n        string memory description,\n        LibShare.Share[] memory royalties\n    )\n</code></pre> <ul> <li>name: Name of the collection</li> <li>symbol: Symbol of the collection</li> <li>description: Description of the collection</li> <li>royalties: array of Share struct</li> </ul> <p>Tokens can be created inside collections and can be sold, bought, and auctioned.</p>"},{"location":"smart-conrtracts/erc721/3_Functions/3.3_Minting/","title":"Mint","text":"<p>Minting is done using safeMint function in both (PNDC_ERC721 and TokenERC721) contracts.</p> <p>For PNDC_ERC721</p> <pre><code>    safeMint(\n        address to,\n        string memory uri,\n        LibShare.Share[] memory royalties\n    )\n</code></pre> <ul> <li>to: address of the owner</li> <li>uri: suffix for the token uri</li> <li>royalties: array of Share struct</li> </ul> <p>For TokenERC721</p> <pre><code>    safeMint(\n        address to,\n        string memory uri,\n        RoyaltiesSet memory royaltiesSet\n    )\n</code></pre> <ul> <li>to: address of the owner</li> <li>uri: suffix for the token uri</li> <li>royaltiesSet: RoyaltiesSet struct</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.4_BatchMinting/","title":"BatchMint","text":"<p>Batch Minting is performed using batchMint function</p> <p>For PNDC_ERC721</p> <pre><code>    batchMint(\n        uint256 _totalNft,\n        string[] memory _uri,\n        LibShare.Share[][] memory royaltiesSet\n    )\n</code></pre> <ul> <li>_totalNFT: number of NFTs to mint</li> <li>_uri: array of uri</li> <li>royaltiesSet: nested array of Share struct</li> </ul> <p>For TokenERC721</p> <pre><code>    batchMint(\n        uint256 _totalNft,\n        string[] memory _uri,\n        RoyaltiesSet memory royaltiesSet\n    )\n</code></pre> <ul> <li>_totalNFT: number of NFTs to mint</li> <li>_uri: array of uri</li> <li>royaltiesSet: RoyaltiesSet struct</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.5_Royalties/","title":"Royalties","text":"<p>Royalties for a token can be retrieved using getRoyalties function in both (PNDC_ERC721 and TokenERC721) contracts.</p> <pre><code>    getRoyalties(\n        uint256 _tokenId\n    )\n</code></pre> <p>It returns an array of Share struct.</p> <p>In the TokenERC721 contract, there are additional functions for setting Royalties by token Id and for collections.</p> <p>By TokenId-</p> <pre><code>    setRoyaltiesByTokenId(\n        uint256 _tokenId,\n        RoyaltiesSet memory royaltiesSet\n    )\n</code></pre> <ul> <li>_tokenId: Id of token whose royalty is getting set</li> <li>royaltiesSet: RoyaltiesSet struct</li> </ul> <p>It emits an event:</p> <pre><code>RoyaltiesSetForTokenId(_tokenId, royaltiesSet.royalties);\n</code></pre> <p>For Collections-</p> <pre><code>    setRoyaltiesForCollection(\n        LibShare.Share[] memory royalties\n    )\n</code></pre> <ul> <li>royalties: array of Share struct</li> </ul> <p>It emits an event:</p> <pre><code>RoyaltiesSetForCollection(royalties);\n</code></pre>"},{"location":"smart-conrtracts/erc721/3_Functions/3.6_Selling/","title":"Sell","text":"<p>Selling of NFTs can be performed using sellNFT function of NFTFactoryContract contract.</p> <pre><code>    sellNFT(\n        address _collectionAddress,\n        uint256 _tokenId,\n        uint256 _price\n    )\n</code></pre> <ul> <li>_collectionAddress: address of collection</li> <li>_tokenId: Id of token willing to sell</li> <li>_price: selling price</li> </ul> <p>It emits an event:</p> <pre><code>    TokenMetaReturn(meta, _tokenIdTracker.current())\n</code></pre> <ul> <li>meta: TokenMeta struct</li> <li>_tokenIdTracker.current(): a counter tracking current token Id</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.7_Buying/","title":"Buy","text":"<p>NFTs can be bought using buyNFT function of NFTFactoryContract contract.</p> <pre><code>    BuyNFT(\n        uint256 _saleId\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on sale</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.8_Auctioning/","title":"Auction","text":"<p>NFTs can also be put on Auction Sale using sellNFT_byBid function of NFTBid contract. An auction sale is the sale of goods through a bidding process.</p> <pre><code>    SellNFT_byBid(\n        address _collectionAddress,\n        uint256 _tokenId,\n        uint256 _price,\n        uint256 _bidTime\n    )\n</code></pre> <ul> <li>_collectionAddress: address of collection</li> <li>_tokenId: Id of token willing to sell</li> <li>_price: selling price</li> <li>_bidTime: time till NFT is on auction</li> </ul> <p>It emits an event:</p> <pre><code>    TokenMetaReturn(meta, _tokenIdTracker.current())\n</code></pre> <ul> <li>meta: TokenMeta struct</li> <li>_tokenIdTracker.current(): a counter tracking current token Id</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.9_Bidding/","title":"Bid","text":"<p>Anyone can bid on NFT on auction sale using bid function of NFTBid contract.</p> <pre><code>    Bid(\n        uint256 _saleId\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on auction sale</li> </ul> <p>It emits an event:</p> <pre><code>BidOrderReturn(bid);\n</code></pre> <ul> <li>bid: BidOrder struct</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.9_Bidding/#executing-bid","title":"Executing Bid","text":"<p>A bid can be executed by the owner of NFT using executeBidOrder function of NFTBid contract.</p> <pre><code>    executeBidOrder(\n        uint256 _saleId,\n        uint256 _bidOrderID\n    )\n</code></pre> <ul> <li>_saleId: Id of the item on auction sale</li> <li>_bidOrderId: Id of bid order</li> </ul> <p>It emits an event:</p> <pre><code>BidExecuted(Bids[_saleId][_bidOrderID].price)\n</code></pre> <ul> <li>Bids[_saleId][_bidorderid].price: price at which bid executed</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/3.9_Bidding/#withdrawing-bid","title":"Withdrawing Bid","text":"<p>Other bidders can withdraw their money using withdrawBidMoney function of NFTBid contract.</p> <pre><code>    withdrawBidMoney(\n        uint256 _saleId,\n        uint256 _bidId\n    )\n</code></pre> <ul> <li>_saleId: Id of the item that was on auction sale</li> <li>_bidId: Id of that bid</li> </ul>"},{"location":"smart-conrtracts/erc721/3_Functions/Burn/","title":"Burn","text":"<p>Minted NFTs can be burned using burn function of both PNDC_ERC721 and TokenERC721 contract.</p> <pre><code>    burn (\n        uint256 _tokenId\n    )\n</code></pre> <ul> <li>_tokenId: Id of token to burn</li> </ul>"},{"location":"smart-conrtracts/erc721/Structs/1_Structs/","title":"Overview","text":"<p>Structs are special data types in solidity which hold data of different types.</p> <p>There are many structs used in the Smart Contracts which are covered in this section.</p>"},{"location":"smart-conrtracts/erc721/Structs/2_RoyaltiesSet/","title":"RoyaltiesSet","text":"<pre><code>    struct RoyaltiesSet {\n        bool set;\n        LibShare.Share[] royalties;\n    }\n</code></pre> <p>\u2192set: boolean value</p> <p>\u2192royalties: array of Share struct</p>"},{"location":"smart-conrtracts/erc721/Structs/3_TokenMeta/","title":"TokenMeta","text":"<pre><code>    struct TokenMeta {\n        uint256 saleId;\n        address collectionAddress;\n        uint256 tokenId;\n        uint256 price;\n        bool directSale;\n        bool bidSale;\n        bool status;\n        uint256 bidStartTime;\n        uint256 bidEndTime;\n        address currentOwner;\n    }\n</code></pre> <p>\u2192saleId: Id of item on sale</p> <p>\u2192collectionAddress: collection address</p> <p>\u2192tokenId: Id of token</p> <p>\u2192price: selling price/base bidding price</p> <p>\u2192directSale: item on direct sale or not</p> <p>\u2192bidSale: item on bid sale or not</p> <p>\u2192status: status of item</p> <p>\u2192bidStartTime: auction start time</p> <p>\u2192bidEndTime: auction end time</p> <p>\u2192currentOwner: address of current owner</p>"},{"location":"smart-conrtracts/erc721/Structs/4_BidOrder/","title":"BidOrder","text":"<pre><code>    struct BidOrder {\n        uint256 bidId;\n        uint256 saleId;\n        address sellerAddress;\n        address buyerAddress;\n        uint256 price;\n        bool withdrawn;\n    }\n</code></pre> <p>\u2192bidId: bid Id of item</p> <p>\u2192saleId: Id of item on sale</p> <p>\u2192sellerAddress: address of the current owner</p> <p>\u2192buyerAddress: address of the current bidder</p> <p>\u2192price: current bid price</p> <p>\u2192withdrawn: bid value is withdrawn or not</p>"},{"location":"smart-conrtracts/erc721/Structs/Share/","title":"Share","text":"<pre><code>    struct Share {\n        address payable account;\n        uint96 value;\n    }\n</code></pre> <p>\u2192account: address of royalty receiver</p> <p>\u2192value: the amount of royalty</p>"}]}